{"kind": "Listing", "data": {"after": "t3_vxf9fg", "dist": 27, "modhash": null, "geo_filter": null, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "Tell /r/python what you're working on this week! You can be bragging, grousing, sharing your passion, or explaining your pain. Talk about your current project or your pet project; whatever you want to share.", "author_fullname": "t2_145f96", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Sunday Daily Thread: What's everyone working on this week?", "link_flair_richtext": [{"e": "text", "t": "Daily Thread"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "daily-thread", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_vvenfa", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.85, "author_flair_background_color": "#7289da", "subreddit_type": "public", "ups": 8, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": "294da566-de3a-11ea-b735-0e5977e6a00f", "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Daily Thread", "can_mod_post": false, "score": 8, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [{"a": ":python_discord:", "e": "emoji", "u": "https://emoji.redditmedia.com/x0lrxnhaazg51_t5_2qh0y/python_discord"}, {"e": "text", "t": " Python Discord Staff"}], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1657411209.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "richtext", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Tell &lt;a href=\"/r/python\"&gt;/r/python&lt;/a&gt; what you&amp;#39;re working on this week! You can be bragging, grousing, sharing your passion, or explaining your pain. Talk about your current project or your pet project; whatever you want to share.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "6c024934-de3f-11ea-a05a-0ea86b2be9a1", "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": ":python_discord: Python Discord Staff", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#00a6a5", "id": "vvenfa", "is_robot_indexable": true, "report_reasons": null, "author": "Im__Joseph", "discussion_type": null, "num_comments": 18, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "light", "permalink": "/r/Python/comments/vvenfa/sunday_daily_thread_whats_everyone_working_on/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/Python/comments/vvenfa/sunday_daily_thread_whats_everyone_working_on/", "subreddit_subscribers": 985424, "created_utc": 1657411209.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "New to Python and have questions? Use this thread to ask anything about Python, there are no bad questions!\n\nThis thread may be fairly low volume in replies, if you don't receive a response we recommend looking at r/LearnPython or joining the Python Discord server at [https://discord.gg/python](https://discord.gg/python) where you stand a better chance of receiving a response.", "author_fullname": "t2_145f96", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Wednesday Daily Thread: Beginner questions", "link_flair_richtext": [{"e": "text", "t": "Daily Thread"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "daily-thread", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_vxpdb7", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.56, "author_flair_background_color": "#7289da", "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": "294da566-de3a-11ea-b735-0e5977e6a00f", "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Daily Thread", "can_mod_post": false, "score": 1, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [{"a": ":python_discord:", "e": "emoji", "u": "https://emoji.redditmedia.com/x0lrxnhaazg51_t5_2qh0y/python_discord"}, {"e": "text", "t": " Python Discord Staff"}], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1657670409.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "richtext", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;New to Python and have questions? Use this thread to ask anything about Python, there are no bad questions!&lt;/p&gt;\n\n&lt;p&gt;This thread may be fairly low volume in replies, if you don&amp;#39;t receive a response we recommend looking at &lt;a href=\"/r/LearnPython\"&gt;r/LearnPython&lt;/a&gt; or joining the Python Discord server at &lt;a href=\"https://discord.gg/python\"&gt;https://discord.gg/python&lt;/a&gt; where you stand a better chance of receiving a response.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": true, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/8lGJXaQoY6hm0yzDNsG2yzAE7FYF_iP0iW_mCsRiqLk.jpg?auto=webp&amp;s=0c1985f1543fe7a14d14311c2652d980005ef82b", "width": 512, "height": 288}, "resolutions": [{"url": "https://external-preview.redd.it/8lGJXaQoY6hm0yzDNsG2yzAE7FYF_iP0iW_mCsRiqLk.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=d5d9915f2e93ddb2e01d7d244b475bd8ba556f75", "width": 108, "height": 60}, {"url": "https://external-preview.redd.it/8lGJXaQoY6hm0yzDNsG2yzAE7FYF_iP0iW_mCsRiqLk.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=a03b56135a67422f61f4411ebaf79abf530f99be", "width": 216, "height": 121}, {"url": "https://external-preview.redd.it/8lGJXaQoY6hm0yzDNsG2yzAE7FYF_iP0iW_mCsRiqLk.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=308a1d0e6203c761fc5dce0329a967ef5a390785", "width": 320, "height": 180}], "variants": {}, "id": "aNa9dCzuqtUFBkZTt98jjYpcv1i_lqriq_lbtm_LcRo"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "6c024934-de3f-11ea-a05a-0ea86b2be9a1", "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": ":python_discord: Python Discord Staff", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#00a6a5", "id": "vxpdb7", "is_robot_indexable": true, "report_reasons": null, "author": "Im__Joseph", "discussion_type": null, "num_comments": 1, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "light", "permalink": "/r/Python/comments/vxpdb7/wednesday_daily_thread_beginner_questions/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/Python/comments/vxpdb7/wednesday_daily_thread_beginner_questions/", "subreddit_subscribers": 985424, "created_utc": 1657670409.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "", "author_fullname": "t2_cunk2c1e", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Python and TOML: New Best Friends \u2013 Real Python", "link_flair_richtext": [{"e": "text", "t": "Tutorial"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "tutorial", "downs": 0, "thumbnail_height": 78, "top_awarded_type": null, "hide_score": false, "name": "t3_vxr33j", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.94, "author_flair_background_color": null, "ups": 121, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Tutorial", "can_mod_post": false, "score": 121, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "https://a.thumbs.redditmedia.com/ddFGSh5DdaFOsUC4h0PKW5gaNY6mcBzJwR-DFbrbrJ8.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "subreddit_type": "public", "created": 1657675692.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "realpython.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://realpython.com/python-toml/", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/ZeV1-2Pn7CZECyAIu--BznuUXaaQm2amSozimuD3eeo.jpg?auto=webp&amp;s=f49d714f690caf76b9220cc155cf9dd320df6b3d", "width": 1920, "height": 1080}, "resolutions": [{"url": "https://external-preview.redd.it/ZeV1-2Pn7CZECyAIu--BznuUXaaQm2amSozimuD3eeo.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=e42324120bcae373c206828a1785429f9725d2be", "width": 108, "height": 60}, {"url": "https://external-preview.redd.it/ZeV1-2Pn7CZECyAIu--BznuUXaaQm2amSozimuD3eeo.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=9c82c9c2517f402b2c9608214beaa3d80d9b32bc", "width": 216, "height": 121}, {"url": "https://external-preview.redd.it/ZeV1-2Pn7CZECyAIu--BznuUXaaQm2amSozimuD3eeo.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=29b91cb372d9edbe1bd82672124f8a895b95d85b", "width": 320, "height": 180}, {"url": "https://external-preview.redd.it/ZeV1-2Pn7CZECyAIu--BznuUXaaQm2amSozimuD3eeo.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=b7b0991cd2393ef486f32776c5d03ed79163f390", "width": 640, "height": 360}, {"url": "https://external-preview.redd.it/ZeV1-2Pn7CZECyAIu--BznuUXaaQm2amSozimuD3eeo.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=7afa42ac6be0a5c50629ce5503104ede2b467a0a", "width": 960, "height": 540}, {"url": "https://external-preview.redd.it/ZeV1-2Pn7CZECyAIu--BznuUXaaQm2amSozimuD3eeo.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=793c4b452d4729fd7da9a10770ec354aedae14d7", "width": 1080, "height": 607}], "variants": {}, "id": "vzC4tPzMeoq6G9aya7PUo4n90uB93xNa-FmQ1lpsi3Q"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "7987a74c-04d8-11eb-84ca-0e0ac8b5a78f", "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "mod_note": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "num_reports": null, "removal_reason": null, "link_flair_background_color": "#dadada", "id": "vxr33j", "is_robot_indexable": true, "report_reasons": null, "author": "ajpinedam", "discussion_type": null, "num_comments": 13, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/vxr33j/python_and_toml_new_best_friends_real_python/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://realpython.com/python-toml/", "subreddit_subscribers": 985424, "created_utc": 1657675692.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "I don't want to pay for my GUI. Is there any a serious alternative for commercial applications, which can do everything PyQt5 does?\n\nWhen there are open source alternatives, who should use PyQt5 and why? \n\nWhich one is the closest GUI library to PyQt5 (or a better one)?", "author_fullname": "t2_xm3g3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "What makes PyQt5 worth the money?", "link_flair_richtext": [{"e": "text", "t": "Discussion"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "discussion", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_vxkvw9", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.91, "author_flair_background_color": null, "subreddit_type": "public", "ups": 95, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Discussion", "can_mod_post": false, "score": 95, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1657657984.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I don&amp;#39;t want to pay for my GUI. Is there any a serious alternative for commercial applications, which can do everything PyQt5 does?&lt;/p&gt;\n\n&lt;p&gt;When there are open source alternatives, who should use PyQt5 and why? &lt;/p&gt;\n\n&lt;p&gt;Which one is the closest GUI library to PyQt5 (or a better one)?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731", "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "vxkvw9", "is_robot_indexable": true, "report_reasons": null, "author": "satyronicon", "discussion_type": null, "num_comments": 60, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/vxkvw9/what_makes_pyqt5_worth_the_money/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/vxkvw9/what_makes_pyqt5_worth_the_money/", "subreddit_subscribers": 985424, "created_utc": 1657657984.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "Work as  a network engineer so wanted to just make a dumb little app. There are probably a million better ways to achieve it but I did it this way! Basically just asking your cidr mask, then looking for the network number, and it will give you the subnet. Only programmed in /25-/31 as /24 and 32 wouldn't ever be used.\n\n&amp;#x200B;\n\nSo  [10.0.0.55/26](https://10.0.0.55/26) . I would enter 26 first, then 0 since my last octet is lower than 64, and it will tell me that my subnet is 10.0.0.0-63\n\n&amp;#x200B;\n\n        subnum = input(\"Enter a CIDR subnet mask 25-31:\")\n    \n        if subnum == \"25\" or subnum == \"/25\":\n            newnum25 = int(input(\"Either 0 128:\"))\n            print (f\".{newnum25} - {newnum25 + 127}\")\n        elif subnum == \"26\" or subnum == \"/26\":\n            newnum26 = int(input(\"Either 0 64 128 192:\"))\n            print (f\".{newnum26} - {newnum26 + 63}\")\n        elif subnum == \"27\" or subnum == \"/27\":\n            newnum27 = int(input(\"Either 0 32 64 96 128 160 192 224:\"))\n            print (f\".{newnum27} - {newnum27 + 31}\")\n        elif subnum == \"28\" or subnum == \"/28\":\n            newnum28 = int(input(\"Either 0 16 32 48 64 80 96 112 128 144 160 176 192 208         \n    224 240:\"))\n            print (f\".{newnum28} - {newnum28 + 15}\")\n        elif subnum == \"29\" or subnum == \"/29\" :\n            newnum29 = int(input(\"Either 0 8 16 24 32 40 48 56 64 72 80 88 96 104 112     \n    120 128 136 144 152 160 168 176 184 192 200 208 216 224 232 240 248:\"))\n            print (f\".{newnum29} - {newnum29 + 7}\")\n        elif subnum == \"30\" or subnum == \"/30\" :\n            newnum30 = int(input(\"Either 0 4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 \n    68 72 76 80 84 88 92 96 100 104 108 112 116 120 124 128 132 136 140 144 148 152 \n    156 160 164 168 172 176 180 184 188 192 196 200 204 208 212 216 220 224 228 232 \n    236 240 244 248 252:\"))\n            print (f\".{newnum30} - {newnum30 + 3}\")\n        elif subnum == \"31\" or subnum == \"/31\":\n            newnum31 = int(input(\"Either 0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 \n    34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 \n    88 90 92 94 96 98 100 102 104 106 108 110 112 114 116 118 120 122 124 126 128 \n    130 132 134 136 138 140 142 144 146 148 150 152 154 156 158 160 162 164 166 168 \n    170 172 174 176 178 180 182 184 186 188 190 192 194 196 198 200 202 204 206 208 \n    210 212 214 216 218 220 222 224 226 228 230 232 234 236 238 240 242 244 246 248 \n    250 252 254:\"))\n            print (f\".{newnum31} - {newnum31 + 1}\")\n        else :\n            print(\"25-31 only\")\n        k=input(\"press any key to exit\")", "author_fullname": "t2_n7x5g", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Stupid simple subnet calculator", "link_flair_richtext": [{"e": "text", "t": "Beginner Showcase"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "beginner-showcase", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_vxwfzk", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.8, "author_flair_background_color": null, "subreddit_type": "public", "ups": 10, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Beginner Showcase", "can_mod_post": false, "score": 10, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1657693942.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Work as  a network engineer so wanted to just make a dumb little app. There are probably a million better ways to achieve it but I did it this way! Basically just asking your cidr mask, then looking for the network number, and it will give you the subnet. Only programmed in /25-/31 as /24 and 32 wouldn&amp;#39;t ever be used.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;So  &lt;a href=\"https://10.0.0.55/26\"&gt;10.0.0.55/26&lt;/a&gt; . I would enter 26 first, then 0 since my last octet is lower than 64, and it will tell me that my subnet is 10.0.0.0-63&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    subnum = input(&amp;quot;Enter a CIDR subnet mask 25-31:&amp;quot;)\n\n    if subnum == &amp;quot;25&amp;quot; or subnum == &amp;quot;/25&amp;quot;:\n        newnum25 = int(input(&amp;quot;Either 0 128:&amp;quot;))\n        print (f&amp;quot;.{newnum25} - {newnum25 + 127}&amp;quot;)\n    elif subnum == &amp;quot;26&amp;quot; or subnum == &amp;quot;/26&amp;quot;:\n        newnum26 = int(input(&amp;quot;Either 0 64 128 192:&amp;quot;))\n        print (f&amp;quot;.{newnum26} - {newnum26 + 63}&amp;quot;)\n    elif subnum == &amp;quot;27&amp;quot; or subnum == &amp;quot;/27&amp;quot;:\n        newnum27 = int(input(&amp;quot;Either 0 32 64 96 128 160 192 224:&amp;quot;))\n        print (f&amp;quot;.{newnum27} - {newnum27 + 31}&amp;quot;)\n    elif subnum == &amp;quot;28&amp;quot; or subnum == &amp;quot;/28&amp;quot;:\n        newnum28 = int(input(&amp;quot;Either 0 16 32 48 64 80 96 112 128 144 160 176 192 208         \n224 240:&amp;quot;))\n        print (f&amp;quot;.{newnum28} - {newnum28 + 15}&amp;quot;)\n    elif subnum == &amp;quot;29&amp;quot; or subnum == &amp;quot;/29&amp;quot; :\n        newnum29 = int(input(&amp;quot;Either 0 8 16 24 32 40 48 56 64 72 80 88 96 104 112     \n120 128 136 144 152 160 168 176 184 192 200 208 216 224 232 240 248:&amp;quot;))\n        print (f&amp;quot;.{newnum29} - {newnum29 + 7}&amp;quot;)\n    elif subnum == &amp;quot;30&amp;quot; or subnum == &amp;quot;/30&amp;quot; :\n        newnum30 = int(input(&amp;quot;Either 0 4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 \n68 72 76 80 84 88 92 96 100 104 108 112 116 120 124 128 132 136 140 144 148 152 \n156 160 164 168 172 176 180 184 188 192 196 200 204 208 212 216 220 224 228 232 \n236 240 244 248 252:&amp;quot;))\n        print (f&amp;quot;.{newnum30} - {newnum30 + 3}&amp;quot;)\n    elif subnum == &amp;quot;31&amp;quot; or subnum == &amp;quot;/31&amp;quot;:\n        newnum31 = int(input(&amp;quot;Either 0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 \n34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 \n88 90 92 94 96 98 100 102 104 106 108 110 112 114 116 118 120 122 124 126 128 \n130 132 134 136 138 140 142 144 146 148 150 152 154 156 158 160 162 164 166 168 \n170 172 174 176 178 180 182 184 186 188 190 192 194 196 198 200 202 204 206 208 \n210 212 214 216 218 220 222 224 226 228 230 232 234 236 238 240 242 244 246 248 \n250 252 254:&amp;quot;))\n        print (f&amp;quot;.{newnum31} - {newnum31 + 1}&amp;quot;)\n    else :\n        print(&amp;quot;25-31 only&amp;quot;)\n    k=input(&amp;quot;press any key to exit&amp;quot;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "1678450a-cfa2-11ea-830c-0e5035839c63", "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#73ad34", "id": "vxwfzk", "is_robot_indexable": true, "report_reasons": null, "author": "cylemmulo", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/vxwfzk/stupid_simple_subnet_calculator/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/vxwfzk/stupid_simple_subnet_calculator/", "subreddit_subscribers": 985424, "created_utc": 1657693942.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "Hey everyone!\n\nI have a question. As a person whose childhood was in the late 80s early 90s, I grew up learning programming using Logo (yes, that turtle thing :-)).\n\nI think it taught me great basics and allowed me to mess around creating great visual effects with those loops that I just let loose, which again taught some great mathematical basics.\n\nGiven that you can create 3D animations in Blender today using Python, I feel like we should create a way of teaching Python programming through 3D animation, which would take my childhood experience to the next level for this next generation. What is holding us back? Or are there some textbooks used in some high-schools? Am I missing something?", "author_fullname": "t2_4uklrayz", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Teaching kids Python through Blender... Why is no one doing this?", "link_flair_richtext": [{"e": "text", "t": "Discussion"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "discussion", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_vxkx8v", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.85, "author_flair_background_color": null, "subreddit_type": "public", "ups": 58, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Discussion", "can_mod_post": false, "score": 58, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1657658088.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey everyone!&lt;/p&gt;\n\n&lt;p&gt;I have a question. As a person whose childhood was in the late 80s early 90s, I grew up learning programming using Logo (yes, that turtle thing :-)).&lt;/p&gt;\n\n&lt;p&gt;I think it taught me great basics and allowed me to mess around creating great visual effects with those loops that I just let loose, which again taught some great mathematical basics.&lt;/p&gt;\n\n&lt;p&gt;Given that you can create 3D animations in Blender today using Python, I feel like we should create a way of teaching Python programming through 3D animation, which would take my childhood experience to the next level for this next generation. What is holding us back? Or are there some textbooks used in some high-schools? Am I missing something?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731", "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "vxkx8v", "is_robot_indexable": true, "report_reasons": null, "author": "ioah86", "discussion_type": null, "num_comments": 31, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/vxkx8v/teaching_kids_python_through_blender_why_is_no/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/vxkx8v/teaching_kids_python_through_blender_why_is_no/", "subreddit_subscribers": 985424, "created_utc": 1657658088.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "", "author_fullname": "t2_ejef22q0", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Do you 80-columns?", "link_flair_richtext": [{"e": "text", "t": "Discussion"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "discussion", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_vx94uq", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.88, "author_flair_background_color": null, "subreddit_type": "public", "ups": 204, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Discussion", "can_mod_post": false, "score": 204, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1657625953.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731", "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "vx94uq", "is_robot_indexable": true, "report_reasons": null, "author": "Ubaldo79", "discussion_type": null, "num_comments": 214, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/vx94uq/do_you_80columns/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/vx94uq/do_you_80columns/", "subreddit_subscribers": 985424, "created_utc": 1657625953.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": " **\ud83d\udce2 i8 Terminal: Stock market and terminal lovers, we have a modern open-source solution for you!** \n\nWe are finally here and we are open-source. Yeay! \ud83c\udf89 Check out our [GitHub](https://github.com/investoreight/i8-terminal/)!\n\n[i8 Terminal](https://www.i8terminal.io/) is a Python-based market research solution that empowers users with a powerful interface: command-line.\n\nWith i8 Terminal you can analyze and compare securities using built-in and custom metrics. Create modern and custom visualizations, and implement your own custom commands or strategies like a pro! Learn some of the features of i8 Terminal: [https://i8terminal.io/](https://i8terminal.io/)\n\nInstall it now with Python pip:\n\npip install i8-terminal\n\ni8 Terminal makes use of [Investoreight platform](https://www.investoreight.com/), where market data is centrally managed. You can even go beyond the standard commands and create your own commands using the [Investoreight core API](https://pypi.org/project/investor8-sdk/).\n\nWe are excited to get feedback and contributions from the community and don't forget to start us on [GitHub](https://github.com/investoreight/i8-terminal)! \ud83d\ude09", "author_fullname": "t2_pxbeq35y", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Introducing i8 Terminal: An open-source modern market research tool with the power of Command-Line", "link_flair_richtext": [{"e": "text", "t": "News"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "news", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_vxyf8p", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.63, "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "News", "can_mod_post": false, "score": 4, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": 1657708508.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1657702060.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;\ud83d\udce2 i8 Terminal: Stock market and terminal lovers, we have a modern open-source solution for you!&lt;/strong&gt; &lt;/p&gt;\n\n&lt;p&gt;We are finally here and we are open-source. Yeay! \ud83c\udf89 Check out our &lt;a href=\"https://github.com/investoreight/i8-terminal/\"&gt;GitHub&lt;/a&gt;!&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.i8terminal.io/\"&gt;i8 Terminal&lt;/a&gt; is a Python-based market research solution that empowers users with a powerful interface: command-line.&lt;/p&gt;\n\n&lt;p&gt;With i8 Terminal you can analyze and compare securities using built-in and custom metrics. Create modern and custom visualizations, and implement your own custom commands or strategies like a pro! Learn some of the features of i8 Terminal: &lt;a href=\"https://i8terminal.io/\"&gt;https://i8terminal.io/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Install it now with Python pip:&lt;/p&gt;\n\n&lt;p&gt;pip install i8-terminal&lt;/p&gt;\n\n&lt;p&gt;i8 Terminal makes use of &lt;a href=\"https://www.investoreight.com/\"&gt;Investoreight platform&lt;/a&gt;, where market data is centrally managed. You can even go beyond the standard commands and create your own commands using the &lt;a href=\"https://pypi.org/project/investor8-sdk/\"&gt;Investoreight core API&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;We are excited to get feedback and contributions from the community and don&amp;#39;t forget to start us on &lt;a href=\"https://github.com/investoreight/i8-terminal\"&gt;GitHub&lt;/a&gt;! \ud83d\ude09&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": true, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/J-Iop4BtpNgvxhVYThR4Sj6ssW1AiPCXli8ar7bJySo.jpg?auto=webp&amp;s=697ca390acc2aa263c8d5873ab67f523dcf1a642", "width": 1200, "height": 600}, "resolutions": [{"url": "https://external-preview.redd.it/J-Iop4BtpNgvxhVYThR4Sj6ssW1AiPCXli8ar7bJySo.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=fd71bcfe18b800a5da5e212c44374744c84b6c53", "width": 108, "height": 54}, {"url": "https://external-preview.redd.it/J-Iop4BtpNgvxhVYThR4Sj6ssW1AiPCXli8ar7bJySo.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=1a16fc0ed7faa1fe017b1e5e763bf55b7944b5b7", "width": 216, "height": 108}, {"url": "https://external-preview.redd.it/J-Iop4BtpNgvxhVYThR4Sj6ssW1AiPCXli8ar7bJySo.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=5b1dab97b33f3b062f8140f1afa01d2603a3210d", "width": 320, "height": 160}, {"url": "https://external-preview.redd.it/J-Iop4BtpNgvxhVYThR4Sj6ssW1AiPCXli8ar7bJySo.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=3b8cda9e2b40b99920c1638e22793abd47bc4c06", "width": 640, "height": 320}, {"url": "https://external-preview.redd.it/J-Iop4BtpNgvxhVYThR4Sj6ssW1AiPCXli8ar7bJySo.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=7b0a8f5bab457c30fcdea81a812e2f45ee6c30b7", "width": 960, "height": 480}, {"url": "https://external-preview.redd.it/J-Iop4BtpNgvxhVYThR4Sj6ssW1AiPCXli8ar7bJySo.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=54866e9f576b6185bf4050e014aa73916ee6269e", "width": 1080, "height": 540}], "variants": {}, "id": "YQrgLY0D34AB0gv7t3d10rL--e58X7nbbLT79JRnguQ"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "0ad780a0-1c5e-11ea-978c-0ee7bacb2bff", "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "vxyf8p", "is_robot_indexable": true, "report_reasons": null, "author": "investoreight", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/vxyf8p/introducing_i8_terminal_an_opensource_modern/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/vxyf8p/introducing_i8_terminal_an_opensource_modern/", "subreddit_subscribers": 985424, "created_utc": 1657702060.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "`pydt-range` is purely python mini library that allows to iterate over `datetime` objects with a specified step (similar to built-in `range()`)\n\nThe step parameter is `timedelta()` object which allows to create steps up to microseconds\n\nGitHub: [https://github.com/skroll182/pydt-range](https://github.com/skroll182/pydt-range)\n\nPyPi: [https://pypi.org/project/pydt-range/#description](https://pypi.org/project/pydt-range/#description)", "author_fullname": "t2_tyu3i", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "I just released my lib to create ranges with datetime objects", "link_flair_richtext": [{"e": "text", "t": "Intermediate Showcase"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "intermediate-showcase", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": true, "name": "t3_vy0ae9", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.67, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Intermediate Showcase", "can_mod_post": false, "score": 1, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1657709343.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;code&gt;pydt-range&lt;/code&gt; is purely python mini library that allows to iterate over &lt;code&gt;datetime&lt;/code&gt; objects with a specified step (similar to built-in &lt;code&gt;range()&lt;/code&gt;)&lt;/p&gt;\n\n&lt;p&gt;The step parameter is &lt;code&gt;timedelta()&lt;/code&gt; object which allows to create steps up to microseconds&lt;/p&gt;\n\n&lt;p&gt;GitHub: &lt;a href=\"https://github.com/skroll182/pydt-range\"&gt;https://github.com/skroll182/pydt-range&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;PyPi: &lt;a href=\"https://pypi.org/project/pydt-range/#description\"&gt;https://pypi.org/project/pydt-range/#description&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": true, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/7f3g380B3-hWxayZN0ET_2LtsZ1617Jn49nbnfGxxpM.jpg?auto=webp&amp;s=4ee686631270d0147815e241bed175e90c8d4257", "width": 1200, "height": 600}, "resolutions": [{"url": "https://external-preview.redd.it/7f3g380B3-hWxayZN0ET_2LtsZ1617Jn49nbnfGxxpM.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=e60736ad0a6ef59226d0c16aeffab2889e9ae4b7", "width": 108, "height": 54}, {"url": "https://external-preview.redd.it/7f3g380B3-hWxayZN0ET_2LtsZ1617Jn49nbnfGxxpM.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=b1ee5b19107452a7e3994741a4464f8fff14f709", "width": 216, "height": 108}, {"url": "https://external-preview.redd.it/7f3g380B3-hWxayZN0ET_2LtsZ1617Jn49nbnfGxxpM.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=7826efdddf6fdadc3d2163d43067cdb04d834d87", "width": 320, "height": 160}, {"url": "https://external-preview.redd.it/7f3g380B3-hWxayZN0ET_2LtsZ1617Jn49nbnfGxxpM.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=7fbb647a24b0e1beb5f49633b15155b59f83f15f", "width": 640, "height": 320}, {"url": "https://external-preview.redd.it/7f3g380B3-hWxayZN0ET_2LtsZ1617Jn49nbnfGxxpM.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=6935694a10839217a62cffac0ba721c94fc1bdf8", "width": 960, "height": 480}, {"url": "https://external-preview.redd.it/7f3g380B3-hWxayZN0ET_2LtsZ1617Jn49nbnfGxxpM.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=ceb95d0e6b5baa1a32e1b66baf4b4fd470c72f6f", "width": 1080, "height": 540}], "variants": {}, "id": "wID2ajumiP_-t8mVCFT0aZIffqDW91a0acSMcLT5EhY"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "23ba6f68-cfa2-11ea-96b4-0e31bcb4ff77", "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#ea0027", "id": "vy0ae9", "is_robot_indexable": true, "report_reasons": null, "author": "SKROLL26", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/vy0ae9/i_just_released_my_lib_to_create_ranges_with/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/vy0ae9/i_just_released_my_lib_to_create_ranges_with/", "subreddit_subscribers": 985424, "created_utc": 1657709343.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "", "author_fullname": "t2_7fe8j", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Is it possible to write a regex for all possible Python programs?", "link_flair_richtext": [{"e": "text", "t": "Meta"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "meta", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": true, "name": "t3_vy09ck", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.5, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Meta", "can_mod_post": false, "score": 0, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1657709232.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "1a0ad668-4115-11ea-b5c6-0ee3885b83fb", "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "vy09ck", "is_robot_indexable": true, "report_reasons": null, "author": "chidedneck", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/vy09ck/is_it_possible_to_write_a_regex_for_all_possible/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/vy09ck/is_it_possible_to_write_a_regex_for_all_possible/", "subreddit_subscribers": 985424, "created_utc": 1657709232.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "", "author_fullname": "t2_hi8zul0m", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Operation: Python 2022 Software Bundle", "link_flair_richtext": [{"e": "text", "t": "Resource"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "resource", "downs": 0, "thumbnail_height": 78, "top_awarded_type": null, "hide_score": true, "name": "t3_vxzyql", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.5, "author_flair_background_color": null, "ups": 0, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Resource", "can_mod_post": false, "score": 0, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "https://a.thumbs.redditmedia.com/CXJN5aMoTg5OXVk3ws2JM5dcdGJAdN-1bpyKgcIu-30.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "subreddit_type": "public", "created": 1657708121.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "medium.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://medium.com/@Humble_Bundle_Partner_Blog/operation-python-software-bundle-acb7b307ed17?2", "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": true, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/5KG-rKiRHQvoqYykHp5CywkwfOlMd6OOuHWuKLWzaLk.jpg?auto=webp&amp;s=6bed49e7c9ad27ec5cb7c7f9b4dc65f85832e242", "width": 1200, "height": 675}, "resolutions": [{"url": "https://external-preview.redd.it/5KG-rKiRHQvoqYykHp5CywkwfOlMd6OOuHWuKLWzaLk.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=5c0a935a10953221449a4f8c2ebb2d9962e4ed7a", "width": 108, "height": 60}, {"url": "https://external-preview.redd.it/5KG-rKiRHQvoqYykHp5CywkwfOlMd6OOuHWuKLWzaLk.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=4586b21a1c6bd1b595addbd42f6a27bfc973a021", "width": 216, "height": 121}, {"url": "https://external-preview.redd.it/5KG-rKiRHQvoqYykHp5CywkwfOlMd6OOuHWuKLWzaLk.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=aba4351f668671c393dce82e32f9f138006634cc", "width": 320, "height": 180}, {"url": "https://external-preview.redd.it/5KG-rKiRHQvoqYykHp5CywkwfOlMd6OOuHWuKLWzaLk.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=ca460aebfec866d7d222da286efd268add024372", "width": 640, "height": 360}, {"url": "https://external-preview.redd.it/5KG-rKiRHQvoqYykHp5CywkwfOlMd6OOuHWuKLWzaLk.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=54bb99d2bc4a42821eb869fc8bccb77a2f548756", "width": 960, "height": 540}, {"url": "https://external-preview.redd.it/5KG-rKiRHQvoqYykHp5CywkwfOlMd6OOuHWuKLWzaLk.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=457a343568bb1225f14ef718193c7e7eafea0bcb", "width": 1080, "height": 607}], "variants": {}, "id": "hHx9sdSKsh8yK3gQRWs5kOpqbXSlCPwetUwt_K4vQmE"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "f9716fb2-4113-11ea-a3f1-0ef51f60f757", "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "mod_note": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "num_reports": null, "removal_reason": null, "link_flair_background_color": "", "id": "vxzyql", "is_robot_indexable": true, "report_reasons": null, "author": "8ing8ong", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/vxzyql/operation_python_2022_software_bundle/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://medium.com/@Humble_Bundle_Partner_Blog/operation-python-software-bundle-acb7b307ed17?2", "subreddit_subscribers": 985424, "created_utc": 1657708121.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "What is the best way to ensure that image file is not more than 5mb?\n\nCan someone share code or give an example to do the following:\n\n1) check if a file is an image.\n\n2) make sure that the image is not more than 5mb (gradually compress the image??)\n\nWhat are the best libraries for that?", "author_fullname": "t2_8m2azun", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "What is the best way to ensure that image file is not more than 5mb?", "link_flair_richtext": [{"e": "text", "t": "Beginner Showcase"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "beginner-showcase", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": true, "name": "t3_vxzkrp", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.5, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Beginner Showcase", "can_mod_post": false, "score": 0, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1657706663.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;What is the best way to ensure that image file is not more than 5mb?&lt;/p&gt;\n\n&lt;p&gt;Can someone share code or give an example to do the following:&lt;/p&gt;\n\n&lt;p&gt;1) check if a file is an image.&lt;/p&gt;\n\n&lt;p&gt;2) make sure that the image is not more than 5mb (gradually compress the image??)&lt;/p&gt;\n\n&lt;p&gt;What are the best libraries for that?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "1678450a-cfa2-11ea-830c-0e5035839c63", "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#73ad34", "id": "vxzkrp", "is_robot_indexable": true, "report_reasons": null, "author": "glorsh66", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/vxzkrp/what_is_the_best_way_to_ensure_that_image_file_is/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/vxzkrp/what_is_the_best_way_to_ensure_that_image_file_is/", "subreddit_subscribers": 985424, "created_utc": 1657706663.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "Hey All!\n\nWorking on something new that you would be a great sounding board for. If I could ask a few questions about how you run, build and use python scripts for ongoing automation or workflows in the course of your job (especially if you are not an engineer) I'll send you coffee credit! Opening up a ton of slots here and will leave this open for as long as I can.\n\nBook time :) -&gt; [https://cal.com/petermangan/20-minutes---coffeee](https://cal.com/petermangan/20-minutes---coffeee)\n\nBest,\n\nPeter  \n\n\n    Questions:\n    -How many co-workers typically interact with scripts and apps you create (outside of company product repos)\n    -Where do you run micro-services and automation scripts?\n    -What is the handoff process if someone on your team makes a new workflow and shares it with others?", "author_fullname": "t2_g0g8f97q", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Use python short scripts at work? - I'll buy you a coffee for a 15 min user interview", "link_flair_richtext": [{"e": "text", "t": "Discussion"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "discussion", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_vxbg1a", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.82, "author_flair_background_color": null, "subreddit_type": "public", "ups": 37, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Discussion", "can_mod_post": false, "score": 37, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1657633040.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey All!&lt;/p&gt;\n\n&lt;p&gt;Working on something new that you would be a great sounding board for. If I could ask a few questions about how you run, build and use python scripts for ongoing automation or workflows in the course of your job (especially if you are not an engineer) I&amp;#39;ll send you coffee credit! Opening up a ton of slots here and will leave this open for as long as I can.&lt;/p&gt;\n\n&lt;p&gt;Book time :) -&amp;gt; &lt;a href=\"https://cal.com/petermangan/20-minutes---coffeee\"&gt;https://cal.com/petermangan/20-minutes---coffeee&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Best,&lt;/p&gt;\n\n&lt;p&gt;Peter  &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Questions:\n-How many co-workers typically interact with scripts and apps you create (outside of company product repos)\n-Where do you run micro-services and automation scripts?\n-What is the handoff process if someone on your team makes a new workflow and shares it with others?\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/yHaNv6_vKCf6e_dUJbccSK_wiyarTFWuRSgEJk2QYLI.jpg?auto=webp&amp;s=191e5672d7f4ecbec46dc971fc29226fcfe184f6", "width": 2048, "height": 1170}, "resolutions": [{"url": "https://external-preview.redd.it/yHaNv6_vKCf6e_dUJbccSK_wiyarTFWuRSgEJk2QYLI.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=9559a7319f9758742dfaddbc6edd8f62f61db4c3", "width": 108, "height": 61}, {"url": "https://external-preview.redd.it/yHaNv6_vKCf6e_dUJbccSK_wiyarTFWuRSgEJk2QYLI.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=b1b48c8e66c7f384a3331d918830f83483f278d4", "width": 216, "height": 123}, {"url": "https://external-preview.redd.it/yHaNv6_vKCf6e_dUJbccSK_wiyarTFWuRSgEJk2QYLI.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=5b4cb799636d0db45ca510ed520452baef139048", "width": 320, "height": 182}, {"url": "https://external-preview.redd.it/yHaNv6_vKCf6e_dUJbccSK_wiyarTFWuRSgEJk2QYLI.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=3288949016a6fc708b7c33cbd2832e27af7cc361", "width": 640, "height": 365}, {"url": "https://external-preview.redd.it/yHaNv6_vKCf6e_dUJbccSK_wiyarTFWuRSgEJk2QYLI.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=31ee1747645e6a9357a7cc330765892e0a0daa80", "width": 960, "height": 548}, {"url": "https://external-preview.redd.it/yHaNv6_vKCf6e_dUJbccSK_wiyarTFWuRSgEJk2QYLI.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=6d59a0331fae5ced11bbb913ebd59e764c1174f5", "width": 1080, "height": 616}], "variants": {}, "id": "hLWkHvd1Awim6GpOXjjGsXvL8BCHsB4qsvLs-I4Rbmc"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731", "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "vxbg1a", "is_robot_indexable": true, "report_reasons": null, "author": "breaking_wave34", "discussion_type": null, "num_comments": 25, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/vxbg1a/use_python_short_scripts_at_work_ill_buy_you_a/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/vxbg1a/use_python_short_scripts_at_work_ill_buy_you_a/", "subreddit_subscribers": 985424, "created_utc": 1657633040.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "Hi I have a simple actuator python script.\n\nHow would I run the following command: roslaunch rplidar_ros view_lidar.launch in my python file.", "author_fullname": "t2_py6fcjyq", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How to run roslaunch within python", "link_flair_richtext": [{"e": "text", "t": "Discussion"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "discussion", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_vxx2rh", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Discussion", "can_mod_post": false, "score": 1, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1657696408.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi I have a simple actuator python script.&lt;/p&gt;\n\n&lt;p&gt;How would I run the following command: roslaunch rplidar_ros view_lidar.launch in my python file.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731", "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "vxx2rh", "is_robot_indexable": true, "report_reasons": null, "author": "Bitter-Assistance-74", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/vxx2rh/how_to_run_roslaunch_within_python/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/vxx2rh/how_to_run_roslaunch_within_python/", "subreddit_subscribers": 985424, "created_utc": 1657696408.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "&amp;#x200B;\n\nhttps://i.redd.it/9st830kxy2b91.gif\n\nHey guys \n\nI am working on an open-source, parallel programming language, Taichi Lang, which I find efficient in differentiable physical simulation and can help speed up the convergence of ML processes.  \n\nAbove is a simple demo supported by Taichi's inbuilt autodiff (automatic differentiation) system. You can move the target as you wish, and the magic fountain always changes its trajectory accordingly to hit the target. \n\nSo basically, Taichi Lang's Source Code Transformation system generates gradient kernels during compile time, and the lightweight `tape` in the Python scope records the launched Taichi kernels and replays the gradient kernels in reverse order during backpropagation. Model training is done within 10 optimization iterations.\n\nSource code is here \ud83d\udc49[https://github.com/taichi-dev/taichi/blob/master/python/taichi/examples/autodiff/diff\\_sph/diff\\_sph.py](https://github.com/taichi-dev/taichi/blob/master/python/taichi/examples/autodiff/diff_sph/diff_sph.py)\n\nI also wrote [a step-by-step explanation](https://www.reddit.com/user/mingrui-zhang/comments/vx49mz/training_a_magic_fountain_using_taichis_autodiff/), which covers the following:\n\n* Simulator (WCSPH)\n* Neural network\n* Controller\n* Training\n\nFeel free to leave a comment or DM me if you have any questions :)", "author_fullname": "t2_8qsqo4np", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Using Taichi-lang, a programming language embedded in Python, to implement differentiable fluid simulation", "link_flair_richtext": [{"e": "text", "t": "Tutorial"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "tutorial", "downs": 0, "thumbnail_height": 140, "top_awarded_type": null, "hide_score": false, "media_metadata": {"9st830kxy2b91": {"status": "valid", "e": "AnimatedImage", "m": "image/gif", "p": [{"y": 133, "x": 108, "u": "https://preview.redd.it/9st830kxy2b91.gif?width=108&amp;crop=smart&amp;format=png8&amp;s=8ebb923d3efdcdf50824eca8c58a245f233c669f"}, {"y": 266, "x": 216, "u": "https://preview.redd.it/9st830kxy2b91.gif?width=216&amp;crop=smart&amp;format=png8&amp;s=3f5dc153938ff920b9554b9bdf98542a08fd84bd"}, {"y": 394, "x": 320, "u": "https://preview.redd.it/9st830kxy2b91.gif?width=320&amp;crop=smart&amp;format=png8&amp;s=1c61f7d1be556ec00e6cf75f16fb00fa96de8708"}], "s": {"y": 483, "gif": "https://i.redd.it/9st830kxy2b91.gif", "mp4": "https://preview.redd.it/9st830kxy2b91.gif?format=mp4&amp;s=ee40042da86ac2f7680776384560e7f2187f2536", "x": 392}, "id": "9st830kxy2b91"}}, "name": "t3_vx4l5q", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.92, "author_flair_background_color": null, "subreddit_type": "public", "ups": 86, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Tutorial", "can_mod_post": false, "score": 86, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/3VClkVMuhKel_VVlrxqzIviUKaxL38qbZiy2kxKx2CQ.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1657607983.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://i.redd.it/9st830kxy2b91.gif\"&gt;https://i.redd.it/9st830kxy2b91.gif&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Hey guys &lt;/p&gt;\n\n&lt;p&gt;I am working on an open-source, parallel programming language, Taichi Lang, which I find efficient in differentiable physical simulation and can help speed up the convergence of ML processes.  &lt;/p&gt;\n\n&lt;p&gt;Above is a simple demo supported by Taichi&amp;#39;s inbuilt autodiff (automatic differentiation) system. You can move the target as you wish, and the magic fountain always changes its trajectory accordingly to hit the target. &lt;/p&gt;\n\n&lt;p&gt;So basically, Taichi Lang&amp;#39;s Source Code Transformation system generates gradient kernels during compile time, and the lightweight &lt;code&gt;tape&lt;/code&gt; in the Python scope records the launched Taichi kernels and replays the gradient kernels in reverse order during backpropagation. Model training is done within 10 optimization iterations.&lt;/p&gt;\n\n&lt;p&gt;Source code is here \ud83d\udc49&lt;a href=\"https://github.com/taichi-dev/taichi/blob/master/python/taichi/examples/autodiff/diff_sph/diff_sph.py\"&gt;https://github.com/taichi-dev/taichi/blob/master/python/taichi/examples/autodiff/diff_sph/diff_sph.py&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I also wrote &lt;a href=\"https://www.reddit.com/user/mingrui-zhang/comments/vx49mz/training_a_magic_fountain_using_taichis_autodiff/\"&gt;a step-by-step explanation&lt;/a&gt;, which covers the following:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Simulator (WCSPH)&lt;/li&gt;\n&lt;li&gt;Neural network&lt;/li&gt;\n&lt;li&gt;Controller&lt;/li&gt;\n&lt;li&gt;Training&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Feel free to leave a comment or DM me if you have any questions :)&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "7987a74c-04d8-11eb-84ca-0e0ac8b5a78f", "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#dadada", "id": "vx4l5q", "is_robot_indexable": true, "report_reasons": null, "author": "mingrui-zhang", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/vx4l5q/using_taichilang_a_programming_language_embedded/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/vx4l5q/using_taichilang_a_programming_language_embedded/", "subreddit_subscribers": 985424, "created_utc": 1657607983.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "Hi all!\n\nI released the version 2 of Red Engine (now Rocketry) about one week ago and I got a lot of great feedback from you which I worked on the past week. I thought to have an update for at least those who I turned away (for issues I fixed) and for those who got confused of the new name.\n\nSo ye, I renamed the library as Rocketry. It must have caused some confusion but I thought this was the last time it was practical before the library is in wider use. I thought maybe it's best that people don't get confused over whether this is a scheduler or a game engine, and I really like the name *Rocketry*: rocket science was my childhood passion so the name has a special meaning for me.\n\nSo, some other key changes:\n\n* Exposed the conditions and it turned out to be great\n* Much easier way to reference tasks and conditions\n* Fix some issues, ie. importing typing in Python 3.7\n* I removed Pandas dependency, now the library should be much lighter\n* Continued with the documentation\n\nSo nowadays the project is here:\n\n* Official documentation: [https://rocketry.readthedocs.io/](https://rocketry.readthedocs.io/)\n* Source code (Github): [https://github.com/Miksus/rocketry](https://github.com/Miksus/rocketry)\n* Releases (PyPI): [https://pypi.org/project/rocketry/](https://pypi.org/project/rocketry/)\n\nThe old repo and PyPI page are still up so your old code should not break (if you already tested this out).\n\n## About Rocketry\n\nSo for those who missed the post, Rocketry is an insanely powerful scheduling framework. It's much more than the alternatives such as Crontab or APScheduler but much easier, cleaner and Pythonic than Airflow. Airflow is for enterprises, Rocketry is for Python applications. Rocketry is sort of FastAPI but for scheduling and automation.\n\nIt's really easy to use:\n\n    from rocketry import Rocketry\n    \n    app = Rocketry()\n    \n    @app.task(\"daily\")\n    def do_things():\n        ...\n    \n    if __name__ == \"__main__\":\n        app.run()\n\nRead more from [the documentation](https://rocketry.readthedocs.io/). I also wrote a [condition handbook](https://rocketry.readthedocs.io/en/stable/handbooks/conditions/index.html) to get a grip on the scheduling options.\n\n## New Stuff\n\nAs said, I exposed the conditions. It is nearly identical to the scheduling language:\n\n    from rocketry import Rocketry\n    from rocketry.conds import daily, after_success, time_of_day\n    from rocketry.args import Return\n    \n    app = Rocketry()\n    \n    @app.task(daily)\n    def do_daily():\n        ...\n    \n    @app.task(hourly &amp; time_of_day.between(\"12:00\", \"17:00\"))\n    def do_daily_in_the_afternoon():\n        ...\n    \n    @app.task(after_success(do_daily))\n    def do_after_task(arg=Return(do_daily)):\n        ...\n    \n    if __name__ == \"__main__\":\n        app.run()\n\nThe condition language builds to the exposed conditions so you are free to use which you prefer. I'm still working on adding some more conditions to the easy-to-use API. See also how you can address the task by simply passing the function.\n\nI also made this possible:\n\n    from rocketry import Rocketry\n    from rocketry.conds import daily\n    from rocketry.args import Return, Task\n    \n    app = Rocketry()\n    \n    @app.cond()\n    def is_foo(task=Task()):\n        # This is custom condition\n        # You can use the task itself to determine if it can run\n        ...\n        return True\n    \n    @app.task(daily.between(\"10:00\", \"15:00\") &amp; is_foo)\n    def do_things():\n        ...\n    \n    if __name__ == \"__main__\":\n        app.run()\n\nSee how the condition can use the task itself to determine the state of the condition. The argument has the task as its value which condition it is evaluating (in other words, you can reuse the condition in other tasks as well). [Here is a comparison of the two.](https://rocketry.readthedocs.io/en/stable/handbooks/conditions/comparisons.html)\n\n## Next?\n\nNext, I'll have a small break from writing code (but focusing on the documentation and on making the project known) but I'm open for suggestions. There is a lot in the metatasks (which are just ordinary tasks that modify the scheduler in runtime) that enable some really cool patterns like building APIs and self-updating schedulers. This probably needs some practical tutorials.\n\nBut the more I work on this, the more I think we are having something that will have a bigger impact on how we automate things. This grew from my little scheduling hobby project to a serious scheduling framework and now it seems there is another evolution ahead: being the automation backend. It is becoming the engine that makes applications autonomous and sets programs alive. It's possible to make self-modifying, self-updating and self-restarting apps with Rocketry, and all of those things are easy to do.\n\nBut I must say I was totally caught by surprise by your positive reaction. The v1 achieved 10 Github stars in 6 months, the second version got 500 stars in less than a week. Thank you a lot! It feels great to develop a project that others like as well.\n\nAgain, the links if you wish not to scroll back up:\n\n* [Official documentation](https://rocketry.readthedocs.io/)\n* [Source code (Github)](https://github.com/Miksus/rocketry)\n* [Releases (PyPI)](https://pypi.org/project/rocketry/)\n\nWhat do you think? What do you think the next step should be and did you like my choices? Any idea of some communities which might be interested in hearing about this project?", "author_fullname": "t2_23tmpa91", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Updates from Rocketry, the insanely powerful scheduler (previously Red Engine)", "link_flair_richtext": [{"e": "text", "t": "Intermediate Showcase"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "intermediate-showcase", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_vxib8e", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.6, "author_flair_background_color": null, "subreddit_type": "public", "ups": 8, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Intermediate Showcase", "can_mod_post": false, "score": 8, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": 1657651885.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1657651187.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi all!&lt;/p&gt;\n\n&lt;p&gt;I released the version 2 of Red Engine (now Rocketry) about one week ago and I got a lot of great feedback from you which I worked on the past week. I thought to have an update for at least those who I turned away (for issues I fixed) and for those who got confused of the new name.&lt;/p&gt;\n\n&lt;p&gt;So ye, I renamed the library as Rocketry. It must have caused some confusion but I thought this was the last time it was practical before the library is in wider use. I thought maybe it&amp;#39;s best that people don&amp;#39;t get confused over whether this is a scheduler or a game engine, and I really like the name &lt;em&gt;Rocketry&lt;/em&gt;: rocket science was my childhood passion so the name has a special meaning for me.&lt;/p&gt;\n\n&lt;p&gt;So, some other key changes:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Exposed the conditions and it turned out to be great&lt;/li&gt;\n&lt;li&gt;Much easier way to reference tasks and conditions&lt;/li&gt;\n&lt;li&gt;Fix some issues, ie. importing typing in Python 3.7&lt;/li&gt;\n&lt;li&gt;I removed Pandas dependency, now the library should be much lighter&lt;/li&gt;\n&lt;li&gt;Continued with the documentation&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;So nowadays the project is here:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Official documentation: &lt;a href=\"https://rocketry.readthedocs.io/\"&gt;https://rocketry.readthedocs.io/&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Source code (Github): &lt;a href=\"https://github.com/Miksus/rocketry\"&gt;https://github.com/Miksus/rocketry&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Releases (PyPI): &lt;a href=\"https://pypi.org/project/rocketry/\"&gt;https://pypi.org/project/rocketry/&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The old repo and PyPI page are still up so your old code should not break (if you already tested this out).&lt;/p&gt;\n\n&lt;h2&gt;About Rocketry&lt;/h2&gt;\n\n&lt;p&gt;So for those who missed the post, Rocketry is an insanely powerful scheduling framework. It&amp;#39;s much more than the alternatives such as Crontab or APScheduler but much easier, cleaner and Pythonic than Airflow. Airflow is for enterprises, Rocketry is for Python applications. Rocketry is sort of FastAPI but for scheduling and automation.&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s really easy to use:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from rocketry import Rocketry\n\napp = Rocketry()\n\n@app.task(&amp;quot;daily&amp;quot;)\ndef do_things():\n    ...\n\nif __name__ == &amp;quot;__main__&amp;quot;:\n    app.run()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Read more from &lt;a href=\"https://rocketry.readthedocs.io/\"&gt;the documentation&lt;/a&gt;. I also wrote a &lt;a href=\"https://rocketry.readthedocs.io/en/stable/handbooks/conditions/index.html\"&gt;condition handbook&lt;/a&gt; to get a grip on the scheduling options.&lt;/p&gt;\n\n&lt;h2&gt;New Stuff&lt;/h2&gt;\n\n&lt;p&gt;As said, I exposed the conditions. It is nearly identical to the scheduling language:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from rocketry import Rocketry\nfrom rocketry.conds import daily, after_success, time_of_day\nfrom rocketry.args import Return\n\napp = Rocketry()\n\n@app.task(daily)\ndef do_daily():\n    ...\n\n@app.task(hourly &amp;amp; time_of_day.between(&amp;quot;12:00&amp;quot;, &amp;quot;17:00&amp;quot;))\ndef do_daily_in_the_afternoon():\n    ...\n\n@app.task(after_success(do_daily))\ndef do_after_task(arg=Return(do_daily)):\n    ...\n\nif __name__ == &amp;quot;__main__&amp;quot;:\n    app.run()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The condition language builds to the exposed conditions so you are free to use which you prefer. I&amp;#39;m still working on adding some more conditions to the easy-to-use API. See also how you can address the task by simply passing the function.&lt;/p&gt;\n\n&lt;p&gt;I also made this possible:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from rocketry import Rocketry\nfrom rocketry.conds import daily\nfrom rocketry.args import Return, Task\n\napp = Rocketry()\n\n@app.cond()\ndef is_foo(task=Task()):\n    # This is custom condition\n    # You can use the task itself to determine if it can run\n    ...\n    return True\n\n@app.task(daily.between(&amp;quot;10:00&amp;quot;, &amp;quot;15:00&amp;quot;) &amp;amp; is_foo)\ndef do_things():\n    ...\n\nif __name__ == &amp;quot;__main__&amp;quot;:\n    app.run()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;See how the condition can use the task itself to determine the state of the condition. The argument has the task as its value which condition it is evaluating (in other words, you can reuse the condition in other tasks as well). &lt;a href=\"https://rocketry.readthedocs.io/en/stable/handbooks/conditions/comparisons.html\"&gt;Here is a comparison of the two.&lt;/a&gt;&lt;/p&gt;\n\n&lt;h2&gt;Next?&lt;/h2&gt;\n\n&lt;p&gt;Next, I&amp;#39;ll have a small break from writing code (but focusing on the documentation and on making the project known) but I&amp;#39;m open for suggestions. There is a lot in the metatasks (which are just ordinary tasks that modify the scheduler in runtime) that enable some really cool patterns like building APIs and self-updating schedulers. This probably needs some practical tutorials.&lt;/p&gt;\n\n&lt;p&gt;But the more I work on this, the more I think we are having something that will have a bigger impact on how we automate things. This grew from my little scheduling hobby project to a serious scheduling framework and now it seems there is another evolution ahead: being the automation backend. It is becoming the engine that makes applications autonomous and sets programs alive. It&amp;#39;s possible to make self-modifying, self-updating and self-restarting apps with Rocketry, and all of those things are easy to do.&lt;/p&gt;\n\n&lt;p&gt;But I must say I was totally caught by surprise by your positive reaction. The v1 achieved 10 Github stars in 6 months, the second version got 500 stars in less than a week. Thank you a lot! It feels great to develop a project that others like as well.&lt;/p&gt;\n\n&lt;p&gt;Again, the links if you wish not to scroll back up:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://rocketry.readthedocs.io/\"&gt;Official documentation&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/Miksus/rocketry\"&gt;Source code (Github)&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://pypi.org/project/rocketry/\"&gt;Releases (PyPI)&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;What do you think? What do you think the next step should be and did you like my choices? Any idea of some communities which might be interested in hearing about this project?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "23ba6f68-cfa2-11ea-96b4-0e31bcb4ff77", "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#ea0027", "id": "vxib8e", "is_robot_indexable": true, "report_reasons": null, "author": "Natural-Intelligence", "discussion_type": null, "num_comments": 12, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/vxib8e/updates_from_rocketry_the_insanely_powerful/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/vxib8e/updates_from_rocketry_the_insanely_powerful/", "subreddit_subscribers": 985424, "created_utc": 1657651187.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "Hello, I just made a simple Python script that converts images into `matplotlib.pyplot`.\n\n[Example of converting image](https://preview.redd.it/0lufpjdpz1b91.png?width=1640&amp;format=png&amp;auto=webp&amp;s=6d0e0e77745a38f1def7b85565179252b8d23437)\n\nThis uses bezier curves to convert picture images into `matplotlib.pyplot` graphs!\n\nAlso this supports generating videos using ffmpeg like below!\n\n&amp;#x200B;\n\n[NootNoot Meme](https://reddit.com/link/vx0wy3/video/8wt5b2hfm9b91/player)\n\nIf you are interested in the project, please check [https://github.com/gooday2die/PltPics](https://github.com/gooday2die/PltPics) for more information, as well as converting your favorite image into graphs!\n\nAlso supports easy Python CLI interface.\n\nAlso, if this post violates rules of this community, I will edit and modify it ASAP.\n\nThanks!", "author_fullname": "t2_15lxg5", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Draw Images and Videos using Matplotlib", "link_flair_richtext": [{"e": "text", "t": "Beginner Showcase"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "beginner-showcase", "downs": 0, "thumbnail_height": 70, "top_awarded_type": null, "hide_score": false, "media_metadata": {"0lufpjdpz1b91": {"status": "valid", "e": "Image", "m": "image/png", "p": [{"y": 43, "x": 108, "u": "https://preview.redd.it/0lufpjdpz1b91.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=195d62e0bf28906e54028e21394d8eb4198351d9"}, {"y": 87, "x": 216, "u": "https://preview.redd.it/0lufpjdpz1b91.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=6d53223c64c0ba9101076c32ffa53ab784bb69e1"}, {"y": 129, "x": 320, "u": "https://preview.redd.it/0lufpjdpz1b91.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=3f8e6191ecbcf72d83968502647a89684cd833e0"}, {"y": 259, "x": 640, "u": "https://preview.redd.it/0lufpjdpz1b91.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=5f9a67a70fb5a0218d7596a2f74bec9bc28a2aca"}, {"y": 388, "x": 960, "u": "https://preview.redd.it/0lufpjdpz1b91.png?width=960&amp;crop=smart&amp;auto=webp&amp;s=56db8d746c03c5044dd414110c1ccd8b9cd3f019"}, {"y": 437, "x": 1080, "u": "https://preview.redd.it/0lufpjdpz1b91.png?width=1080&amp;crop=smart&amp;auto=webp&amp;s=fbeffb96bc6e9d16d2c921b767896b0bd7d7d9ba"}], "s": {"y": 664, "x": 1640, "u": "https://preview.redd.it/0lufpjdpz1b91.png?width=1640&amp;format=png&amp;auto=webp&amp;s=6d0e0e77745a38f1def7b85565179252b8d23437"}, "id": "0lufpjdpz1b91"}, "8wt5b2hfm9b91": {"status": "valid", "e": "RedditVideo", "dashUrl": "https://v.redd.it/link/vx0wy3/asset/8wt5b2hfm9b91/DASHPlaylist.mpd?a=1660305641%2CM2JlZjE4Zjk5ZTY0NDAwNzViZjU4M2RkZmE0ZTRmMTg4MzhhZjliYmJmODMyNzFjYTI4MGQyMjM2OGNhMTJhMQ%3D%3D&amp;v=1&amp;f=hd", "x": 1278, "y": 720, "hlsUrl": "https://v.redd.it/link/vx0wy3/asset/8wt5b2hfm9b91/HLSPlaylist.m3u8?a=1660305641%2CYjczZDVmODBkYTlmYTU2MDAzNjJlYWM2NGU3OGI5OGQwNjUwYzRlNTI5OGE1MDRiODBiZGIzZTUxODI3ZTdlZA%3D%3D&amp;v=1&amp;f=hd", "id": "8wt5b2hfm9b91", "isGif": false}}, "name": "t3_vx0wy3", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.95, "author_flair_background_color": null, "ups": 152, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Beginner Showcase", "can_mod_post": false, "score": 152, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/SXzNEmc87sDalkBFBeV5jyEts_OaStTVPhvN-fvuThM.jpg", "edited": 1657687482.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "subreddit_type": "public", "created": 1657595352.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello, I just made a simple Python script that converts images into &lt;code&gt;matplotlib.pyplot&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://preview.redd.it/0lufpjdpz1b91.png?width=1640&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=6d0e0e77745a38f1def7b85565179252b8d23437\"&gt;Example of converting image&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;This uses bezier curves to convert picture images into &lt;code&gt;matplotlib.pyplot&lt;/code&gt; graphs!&lt;/p&gt;\n\n&lt;p&gt;Also this supports generating videos using ffmpeg like below!&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://reddit.com/link/vx0wy3/video/8wt5b2hfm9b91/player\"&gt;NootNoot Meme&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;If you are interested in the project, please check &lt;a href=\"https://github.com/gooday2die/PltPics\"&gt;https://github.com/gooday2die/PltPics&lt;/a&gt; for more information, as well as converting your favorite image into graphs!&lt;/p&gt;\n\n&lt;p&gt;Also supports easy Python CLI interface.&lt;/p&gt;\n\n&lt;p&gt;Also, if this post violates rules of this community, I will edit and modify it ASAP.&lt;/p&gt;\n\n&lt;p&gt;Thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/eoDIToCEoiyBqTb9xcdo9agKUwVgTVOm0_JwUCvWyj4.jpg?auto=webp&amp;s=684768b8ca7986123a6b09636aa4f5c17ba28ebf", "width": 1280, "height": 640}, "resolutions": [{"url": "https://external-preview.redd.it/eoDIToCEoiyBqTb9xcdo9agKUwVgTVOm0_JwUCvWyj4.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=42add9ed819753a169196010707a0ea414ef253e", "width": 108, "height": 54}, {"url": "https://external-preview.redd.it/eoDIToCEoiyBqTb9xcdo9agKUwVgTVOm0_JwUCvWyj4.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=afc96a1a15b3359d5aacebcbf972f3f678df4712", "width": 216, "height": 108}, {"url": "https://external-preview.redd.it/eoDIToCEoiyBqTb9xcdo9agKUwVgTVOm0_JwUCvWyj4.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=88f6a6ea9cf9829abc0dcb898bbc9e587ae23569", "width": 320, "height": 160}, {"url": "https://external-preview.redd.it/eoDIToCEoiyBqTb9xcdo9agKUwVgTVOm0_JwUCvWyj4.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=a41f1a50a3081937f9ac59a374fa4632bec8100a", "width": 640, "height": 320}, {"url": "https://external-preview.redd.it/eoDIToCEoiyBqTb9xcdo9agKUwVgTVOm0_JwUCvWyj4.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=2a7e63870ff3e9f1f5115aaa48efd045be64e638", "width": 960, "height": 480}, {"url": "https://external-preview.redd.it/eoDIToCEoiyBqTb9xcdo9agKUwVgTVOm0_JwUCvWyj4.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=51c6b97c53ce65bdc0aae8d2d2dbf46e72a2ebe5", "width": 1080, "height": 540}], "variants": {}, "id": "y6cP6sb9vmsQUsD5w7pKD2qvPmWzuxObkSHCGdalb60"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "1678450a-cfa2-11ea-830c-0e5035839c63", "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "mod_note": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "num_reports": null, "removal_reason": null, "link_flair_background_color": "#73ad34", "id": "vx0wy3", "is_robot_indexable": true, "report_reasons": null, "author": "gooday2die", "discussion_type": null, "num_comments": 20, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/vx0wy3/draw_images_and_videos_using_matplotlib/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/vx0wy3/draw_images_and_videos_using_matplotlib/", "subreddit_subscribers": 985424, "created_utc": 1657595352.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": " \n\n# Do you like jumping into holes?\n\n**Of course you do!**\n\nThen \\*cough\\****you're weird***\\*\\*cough\\* (just kidding)\\* you can try **Next Dimension!**\n\n&amp;#x200B;\n\nhttps://preview.redd.it/jnwoc7sdw9b91.png?width=794&amp;format=png&amp;auto=webp&amp;s=4d48f41fafd4c21254466403f1fa22ebeab7c1b3\n\n&amp;#x200B;\n\nhttps://preview.redd.it/qsyga47ew9b91.png?width=794&amp;format=png&amp;auto=webp&amp;s=c5d7cee2f27a6727b844210e2513dad49515c12d\n\n**Next dimension** is a game in which you have to get to the next dimension before it's too late. This game was made for the **Pygame Community Summer Jam 2022**\u00a0by the creator of [Agile](https://skysurfer-kon.itch.io/agile). The game runs on Windows.\n\nDownload it [here](https://skysurfer-kon.itch.io/next-dimension)!", "author_fullname": "t2_9zd6tlxe", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Next Dimension is released!", "link_flair_richtext": [{"e": "text", "t": "Intermediate Showcase"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "intermediate-showcase", "downs": 0, "thumbnail_height": 102, "top_awarded_type": null, "hide_score": false, "media_metadata": {"qsyga47ew9b91": {"status": "valid", "e": "Image", "m": "image/png", "p": [{"y": 54, "x": 108, "u": "https://preview.redd.it/qsyga47ew9b91.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=444d9dd9e3137d06759d66fdbe11e4b4e2a5dbbe"}, {"y": 108, "x": 216, "u": "https://preview.redd.it/qsyga47ew9b91.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=c8eba84c9bf181a1a7a017478096549a5f9e6429"}, {"y": 160, "x": 320, "u": "https://preview.redd.it/qsyga47ew9b91.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=c6369dd4004c9215db9e0e0b229210a558bfc222"}, {"y": 320, "x": 640, "u": "https://preview.redd.it/qsyga47ew9b91.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=563590a05db949fdab30139f9c622bef0ad93a01"}], "s": {"y": 397, "x": 794, "u": "https://preview.redd.it/qsyga47ew9b91.png?width=794&amp;format=png&amp;auto=webp&amp;s=c5d7cee2f27a6727b844210e2513dad49515c12d"}, "id": "qsyga47ew9b91"}, "jnwoc7sdw9b91": {"status": "valid", "e": "Image", "m": "image/png", "p": [{"y": 54, "x": 108, "u": "https://preview.redd.it/jnwoc7sdw9b91.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=c7c7d8378e5d0ec9dbb74c8d19384c74a6ff8d76"}, {"y": 108, "x": 216, "u": "https://preview.redd.it/jnwoc7sdw9b91.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=2949b0804d26ce9fdd045e7bad3d4e7048d84f1c"}, {"y": 160, "x": 320, "u": "https://preview.redd.it/jnwoc7sdw9b91.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=5c31e97eb97662212a19499715c1a42cda35245b"}, {"y": 320, "x": 640, "u": "https://preview.redd.it/jnwoc7sdw9b91.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=e26844f96dc73386d0b90323ada107c2f0a88921"}], "s": {"y": 397, "x": 794, "u": "https://preview.redd.it/jnwoc7sdw9b91.png?width=794&amp;format=png&amp;auto=webp&amp;s=4d48f41fafd4c21254466403f1fa22ebeab7c1b3"}, "id": "jnwoc7sdw9b91"}}, "name": "t3_vxvnxn", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.6, "author_flair_background_color": null, "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Intermediate Showcase", "can_mod_post": false, "score": 1, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/ZoSmtLgfbchtHBsoRp1aHy9RHOhOHzcwwaYuVOGaf2Y.jpg", "edited": 1657693370.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "subreddit_type": "public", "created": 1657690872.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Do you like jumping into holes?&lt;/h1&gt;\n\n&lt;p&gt;&lt;strong&gt;Of course you do!&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Then *cough*&lt;strong&gt;&lt;em&gt;you&amp;#39;re weird&lt;/em&gt;&lt;/strong&gt;**cough* (just kidding)* you can try &lt;strong&gt;Next Dimension!&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://preview.redd.it/jnwoc7sdw9b91.png?width=794&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=4d48f41fafd4c21254466403f1fa22ebeab7c1b3\"&gt;https://preview.redd.it/jnwoc7sdw9b91.png?width=794&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=4d48f41fafd4c21254466403f1fa22ebeab7c1b3&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://preview.redd.it/qsyga47ew9b91.png?width=794&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=c5d7cee2f27a6727b844210e2513dad49515c12d\"&gt;https://preview.redd.it/qsyga47ew9b91.png?width=794&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=c5d7cee2f27a6727b844210e2513dad49515c12d&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Next dimension&lt;/strong&gt; is a game in which you have to get to the next dimension before it&amp;#39;s too late. This game was made for the &lt;strong&gt;Pygame Community Summer Jam 2022&lt;/strong&gt;\u00a0by the creator of &lt;a href=\"https://skysurfer-kon.itch.io/agile\"&gt;Agile&lt;/a&gt;. The game runs on Windows.&lt;/p&gt;\n\n&lt;p&gt;Download it &lt;a href=\"https://skysurfer-kon.itch.io/next-dimension\"&gt;here&lt;/a&gt;!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": true, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/Gqy7iX-LrZjMq4pdLGO1p3oIUSSOZbPcWpnhWUQFT4I.jpg?auto=webp&amp;s=d5225b14f451e02b4a3a674acc2daf8736ec833f", "width": 626, "height": 459}, "resolutions": [{"url": "https://external-preview.redd.it/Gqy7iX-LrZjMq4pdLGO1p3oIUSSOZbPcWpnhWUQFT4I.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=d286a7bb26bf2f537b95ce63cf813a0cabd2c34a", "width": 108, "height": 79}, {"url": "https://external-preview.redd.it/Gqy7iX-LrZjMq4pdLGO1p3oIUSSOZbPcWpnhWUQFT4I.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=14beb31ccb2e1523bcbf1e193e9f31de4f313851", "width": 216, "height": 158}, {"url": "https://external-preview.redd.it/Gqy7iX-LrZjMq4pdLGO1p3oIUSSOZbPcWpnhWUQFT4I.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=24a4431286b64b4bccd08f90daff126a9c67e2a1", "width": 320, "height": 234}], "variants": {}, "id": "NKbUPSBQJVwY4JfbBGsaPvTdgzu6uYIFg12el_2MDAs"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "23ba6f68-cfa2-11ea-96b4-0e31bcb4ff77", "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "mod_note": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "num_reports": null, "removal_reason": null, "link_flair_background_color": "#ea0027", "id": "vxvnxn", "is_robot_indexable": true, "report_reasons": null, "author": "Cute-Ad8139", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/vxvnxn/next_dimension_is_released/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/vxvnxn/next_dimension_is_released/", "subreddit_subscribers": 985424, "created_utc": 1657690872.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "The idea of the project began when i first got an arduino and a LED Matrix, got bored of hardcoding string and images on the arduino and so i made this.\n\nKeep in mind that this is still work-in-progress, so it's not as refined as it can be.\n\nLibraries i used:\n\n* pygame for rendering;\n* pygame\\_gui for gui making;\n* pySerial for comunicating with the arduino.\n\n&amp;#x200B;\n\nDemonstration of it working:\n\n[https://www.youtube.com/watch?v=wqejpU3aGb0](https://www.youtube.com/watch?v=wqejpU3aGb0)\n\nGitHub  repository:\n\n[https://github.com/ReiettoAyanami/LEDMatrixController](https://github.com/ReiettoAyanami/LEDMatrixController)", "author_fullname": "t2_42skvb6u", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "I created a python program to interact with a LED matrix.", "link_flair_richtext": [{"e": "text", "t": "Intermediate Showcase"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "intermediate-showcase", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_vxkff3", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.65, "author_flair_background_color": null, "subreddit_type": "public", "ups": 5, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Intermediate Showcase", "can_mod_post": false, "score": 5, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1657656766.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The idea of the project began when i first got an arduino and a LED Matrix, got bored of hardcoding string and images on the arduino and so i made this.&lt;/p&gt;\n\n&lt;p&gt;Keep in mind that this is still work-in-progress, so it&amp;#39;s not as refined as it can be.&lt;/p&gt;\n\n&lt;p&gt;Libraries i used:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;pygame for rendering;&lt;/li&gt;\n&lt;li&gt;pygame_gui for gui making;&lt;/li&gt;\n&lt;li&gt;pySerial for comunicating with the arduino.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Demonstration of it working:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.youtube.com/watch?v=wqejpU3aGb0\"&gt;https://www.youtube.com/watch?v=wqejpU3aGb0&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;GitHub  repository:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/ReiettoAyanami/LEDMatrixController\"&gt;https://github.com/ReiettoAyanami/LEDMatrixController&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": true, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/acpEKvzNlNXd8QWJQ1lhyVoRSI2cMrWIufhQJ9hn3Qo.jpg?auto=webp&amp;s=37341989a6eca6e1e2622a2daca3e803afd15ebe", "width": 480, "height": 360}, "resolutions": [{"url": "https://external-preview.redd.it/acpEKvzNlNXd8QWJQ1lhyVoRSI2cMrWIufhQJ9hn3Qo.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=6da46769654143add36b6d9a7042ad60519c4d77", "width": 108, "height": 81}, {"url": "https://external-preview.redd.it/acpEKvzNlNXd8QWJQ1lhyVoRSI2cMrWIufhQJ9hn3Qo.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=6f202df22a592566ed77185e0de945228e9b89ec", "width": 216, "height": 162}, {"url": "https://external-preview.redd.it/acpEKvzNlNXd8QWJQ1lhyVoRSI2cMrWIufhQJ9hn3Qo.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=ee6191fdae54dbc0748c489db001b82d119665f4", "width": 320, "height": 240}], "variants": {}, "id": "EQUtqSPDwLpG6EWxsNIDWnj6U0qasjE_kCoDv3cXudI"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "23ba6f68-cfa2-11ea-96b4-0e31bcb4ff77", "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#ea0027", "id": "vxkff3", "is_robot_indexable": true, "report_reasons": null, "author": "ThaSig", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/vxkff3/i_created_a_python_program_to_interact_with_a_led/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/vxkff3/i_created_a_python_program_to_interact_with_a_led/", "subreddit_subscribers": 985424, "created_utc": 1657656766.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "", "author_fullname": "t2_8kcsno8q", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Text Extraction from Images with Python! I put 3 libraries to the test in my latest video", "link_flair_richtext": [{"e": "text", "t": "Tutorial"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "tutorial", "downs": 0, "thumbnail_height": 105, "top_awarded_type": null, "hide_score": false, "name": "t3_vxc8ye", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.62, "author_flair_background_color": null, "ups": 8, "total_awards_received": 0, "media_embed": {"content": "&lt;iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/oyqNdcbKhew?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen title=\"Extract Text from Images with Python - pytesseract vs. easyocr vs keras_ocr\"&gt;&lt;/iframe&gt;", "width": 356, "scrolling": false, "height": 200}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "Extract Text from Images with Python - pytesseract vs. easyocr vs keras_ocr", "type": "video", "thumbnail_width": 480, "height": 200, "width": 356, "html": "&lt;iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/oyqNdcbKhew?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen title=\"Extract Text from Images with Python - pytesseract vs. easyocr vs keras_ocr\"&gt;&lt;/iframe&gt;", "author_name": "Medallion Data Science", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/oyqNdcbKhew/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCxladMszXan-jfgzyeIMyvw"}}, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {"content": "&lt;iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/oyqNdcbKhew?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen title=\"Extract Text from Images with Python - pytesseract vs. easyocr vs keras_ocr\"&gt;&lt;/iframe&gt;", "width": 356, "scrolling": false, "media_domain_url": "https://www.redditmedia.com/mediaembed/vxc8ye", "height": 200}, "link_flair_text": "Tutorial", "can_mod_post": false, "score": 8, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/gwcgBi3E6VONlIrv-FcnP2IX8JEj9NmEJMntldjdkwo.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "rich:video", "content_categories": null, "is_self": false, "subreddit_type": "public", "created": 1657635272.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "youtu.be", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://youtu.be/oyqNdcbKhew", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/EfUBXsyoVXzxuG_vXZf-0uPXMVAkGWp6qCrYR7GeJwk.jpg?auto=webp&amp;s=a0b814c5cb945471631a9d1d5d0178eb874fbdc2", "width": 480, "height": 360}, "resolutions": [{"url": "https://external-preview.redd.it/EfUBXsyoVXzxuG_vXZf-0uPXMVAkGWp6qCrYR7GeJwk.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=dc48084ec5807b94851a8b6d7dc9510999fad451", "width": 108, "height": 81}, {"url": "https://external-preview.redd.it/EfUBXsyoVXzxuG_vXZf-0uPXMVAkGWp6qCrYR7GeJwk.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=7fbd8320df3db49ebd6a3479933e5cc564aa17dd", "width": 216, "height": 162}, {"url": "https://external-preview.redd.it/EfUBXsyoVXzxuG_vXZf-0uPXMVAkGWp6qCrYR7GeJwk.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=012a1e942bc19cedb7829e8cffcf6073a028004b", "width": 320, "height": 240}], "variants": {}, "id": "0ZHWkeHyQnzGnEpbxV3aK_zRxT-G8I8uzXeYxs8P9pI"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "7987a74c-04d8-11eb-84ca-0e0ac8b5a78f", "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "mod_note": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "num_reports": null, "removal_reason": null, "link_flair_background_color": "#dadada", "id": "vxc8ye", "is_robot_indexable": true, "report_reasons": null, "author": "robikscuber", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/vxc8ye/text_extraction_from_images_with_python_i_put_3/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://youtu.be/oyqNdcbKhew", "subreddit_subscribers": 985424, "created_utc": 1657635272.0, "num_crossposts": 1, "media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "Extract Text from Images with Python - pytesseract vs. easyocr vs keras_ocr", "type": "video", "thumbnail_width": 480, "height": 200, "width": 356, "html": "&lt;iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/oyqNdcbKhew?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen title=\"Extract Text from Images with Python - pytesseract vs. easyocr vs keras_ocr\"&gt;&lt;/iframe&gt;", "author_name": "Medallion Data Science", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/oyqNdcbKhew/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCxladMszXan-jfgzyeIMyvw"}}, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "", "author_fullname": "t2_beojvfpb", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Interested in machine learning? Join the Hugging Face Gradio Hackathon at EuroPython 2022 starting on July 13th in person in Dublin, Ireland or remotely online", "link_flair_richtext": [{"e": "text", "t": "News"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "news", "downs": 0, "thumbnail_height": 75, "top_awarded_type": null, "hide_score": false, "name": "t3_vx3qkj", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.85, "author_flair_background_color": null, "ups": 31, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "News", "can_mod_post": false, "score": 31, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/F7srpcndbn0qWvCc6PaXt0T_rd_VC-wN8_T3h6_hjGQ.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "subreddit_type": "public", "created": 1657604758.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "huggingface.co", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://huggingface.co/EuroPython2022", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/TnsIEg7_sEkbMS0TaRSlJSd7ir6kh3176bH-ODDSlN8.jpg?auto=webp&amp;s=76fd9fb7a2b4db81ea6292d5037fe06552edd520", "width": 1200, "height": 648}, "resolutions": [{"url": "https://external-preview.redd.it/TnsIEg7_sEkbMS0TaRSlJSd7ir6kh3176bH-ODDSlN8.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=56bf5d4e7fdda6d2ec4b9ab8b094f61f1a104ae8", "width": 108, "height": 58}, {"url": "https://external-preview.redd.it/TnsIEg7_sEkbMS0TaRSlJSd7ir6kh3176bH-ODDSlN8.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=5431ccaebcf22f35c702a315cc31193ed1050ca2", "width": 216, "height": 116}, {"url": "https://external-preview.redd.it/TnsIEg7_sEkbMS0TaRSlJSd7ir6kh3176bH-ODDSlN8.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=4dc987ab74a9423c458b00e7b9d3ca77868aa2bd", "width": 320, "height": 172}, {"url": "https://external-preview.redd.it/TnsIEg7_sEkbMS0TaRSlJSd7ir6kh3176bH-ODDSlN8.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=bc1418531afbb89d0928f72d5e0ba6495fb64905", "width": 640, "height": 345}, {"url": "https://external-preview.redd.it/TnsIEg7_sEkbMS0TaRSlJSd7ir6kh3176bH-ODDSlN8.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=18a3f423acae06f0b2b1e97a2dccd31e277ee8c6", "width": 960, "height": 518}, {"url": "https://external-preview.redd.it/TnsIEg7_sEkbMS0TaRSlJSd7ir6kh3176bH-ODDSlN8.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=b04cae8b20b1aa2303e5a499f00035bf0f44fd4c", "width": 1080, "height": 583}], "variants": {}, "id": "H6kNd9XYHx4qLCQIe70JwTJLXrGFZUAlmlogcuteT04"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "0ad780a0-1c5e-11ea-978c-0ee7bacb2bff", "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "mod_note": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "num_reports": null, "removal_reason": null, "link_flair_background_color": "", "id": "vx3qkj", "is_robot_indexable": true, "report_reasons": null, "author": "Illustrious_Row_9971", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/vx3qkj/interested_in_machine_learning_join_the_hugging/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://huggingface.co/EuroPython2022", "subreddit_subscribers": 985424, "created_utc": 1657604758.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "", "author_fullname": "t2_9scikdz5", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Breaking down Google's Python Style Guide", "link_flair_richtext": [{"e": "text", "t": "Resource"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "resource", "downs": 0, "thumbnail_height": 93, "top_awarded_type": null, "hide_score": false, "name": "t3_vxed8w", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.65, "author_flair_background_color": null, "ups": 5, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Resource", "can_mod_post": false, "score": 5, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/AB2mVIyGJKIYZ6azZ8rXLk5qTHe2ymJEZYDcXxS_LRM.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "subreddit_type": "public", "created": 1657640887.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "sourcery.ai", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://sourcery.ai/blog/dissecting-the-google-style-guide/", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/L_PmE5dCAhiMPg4L1iHC7Snf0PlOZmWLAw5xf4r_Aps.jpg?auto=webp&amp;s=22952c0865924dc357eea26fd523deaf2d08687c", "width": 5472, "height": 3648}, "resolutions": [{"url": "https://external-preview.redd.it/L_PmE5dCAhiMPg4L1iHC7Snf0PlOZmWLAw5xf4r_Aps.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=90f179b7c7cee67e0505139f17594875ef08202c", "width": 108, "height": 72}, {"url": "https://external-preview.redd.it/L_PmE5dCAhiMPg4L1iHC7Snf0PlOZmWLAw5xf4r_Aps.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=01cb420c43c4f389da3372b17dda890cd368f007", "width": 216, "height": 144}, {"url": "https://external-preview.redd.it/L_PmE5dCAhiMPg4L1iHC7Snf0PlOZmWLAw5xf4r_Aps.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=849dae9f2049baae94bdd754903bb5bdd70f4314", "width": 320, "height": 213}, {"url": "https://external-preview.redd.it/L_PmE5dCAhiMPg4L1iHC7Snf0PlOZmWLAw5xf4r_Aps.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=48d3f0c60c5f6bd5034072bb34c346394b63575b", "width": 640, "height": 426}, {"url": "https://external-preview.redd.it/L_PmE5dCAhiMPg4L1iHC7Snf0PlOZmWLAw5xf4r_Aps.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=75c00b92dafda71207858a1f9f38b4e74685b469", "width": 960, "height": 640}, {"url": "https://external-preview.redd.it/L_PmE5dCAhiMPg4L1iHC7Snf0PlOZmWLAw5xf4r_Aps.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=86dd6dd4c4fd7ec8fa35bb60f13ee7e9be00e5e8", "width": 1080, "height": 720}], "variants": {}, "id": "B0P-vMbuK5sF7571my_Gvwq6NgUAvPAn8656R4OhHg0"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "f9716fb2-4113-11ea-a3f1-0ef51f60f757", "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "mod_note": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "num_reports": null, "removal_reason": null, "link_flair_background_color": "", "id": "vxed8w", "is_robot_indexable": true, "report_reasons": null, "author": "sourcery-ai", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/vxed8w/breaking_down_googles_python_style_guide/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://sourcery.ai/blog/dissecting-the-google-style-guide/", "subreddit_subscribers": 985424, "created_utc": 1657640887.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "", "author_fullname": "t2_73gdlolf", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Webcam Video Augmentation with an Image/Video using ArUco Markers", "link_flair_richtext": [{"e": "text", "t": "Tutorial"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "tutorial", "downs": 0, "thumbnail_height": 105, "top_awarded_type": null, "hide_score": false, "name": "t3_vxdm3k", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.78, "author_flair_background_color": null, "ups": 5, "total_awards_received": 0, "media_embed": {"content": "&lt;iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/D1biUn9X7H8?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen title=\"Webcam Video Augmentation with an Image/Video using ArUco Markers | OpenCV\"&gt;&lt;/iframe&gt;", "width": 356, "scrolling": false, "height": 200}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "Webcam Video Augmentation with an Image/Video using ArUco Markers | OpenCV", "type": "video", "thumbnail_width": 480, "height": 200, "width": 356, "html": "&lt;iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/D1biUn9X7H8?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen title=\"Webcam Video Augmentation with an Image/Video using ArUco Markers | OpenCV\"&gt;&lt;/iframe&gt;", "author_name": "Giovanni Code", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/D1biUn9X7H8/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCerTWfDpE0KdUGzrCdn5Ygw"}}, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {"content": "&lt;iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/D1biUn9X7H8?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen title=\"Webcam Video Augmentation with an Image/Video using ArUco Markers | OpenCV\"&gt;&lt;/iframe&gt;", "width": 356, "scrolling": false, "media_domain_url": "https://www.redditmedia.com/mediaembed/vxdm3k", "height": 200}, "link_flair_text": "Tutorial", "can_mod_post": false, "score": 5, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/YmR9qCjgiK7jPrvQbFfFv1SPUJsu9y70fpUckD3hV9c.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "rich:video", "content_categories": null, "is_self": false, "subreddit_type": "public", "created": 1657638901.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "youtu.be", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://youtu.be/D1biUn9X7H8", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/iiI03bGnSStV8Q4jAUAbc0_H_LHFUrj-OyT9nySvWKs.jpg?auto=webp&amp;s=0c4be69869e91c170a4dca730458a536f3f64e8c", "width": 480, "height": 360}, "resolutions": [{"url": "https://external-preview.redd.it/iiI03bGnSStV8Q4jAUAbc0_H_LHFUrj-OyT9nySvWKs.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=4a886d4050b24a53ceb3acab56c022553197d5d5", "width": 108, "height": 81}, {"url": "https://external-preview.redd.it/iiI03bGnSStV8Q4jAUAbc0_H_LHFUrj-OyT9nySvWKs.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=96798cba896e24221b4734b8dc6629ec3df48bfe", "width": 216, "height": 162}, {"url": "https://external-preview.redd.it/iiI03bGnSStV8Q4jAUAbc0_H_LHFUrj-OyT9nySvWKs.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=6606b3dcdeaa601046b9e72d9058f7a793da0aa6", "width": 320, "height": 240}], "variants": {}, "id": "jsXISMa1q8nrlXEFyj4pcAjziD3bRdi2fw8H5dTbxUY"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "7987a74c-04d8-11eb-84ca-0e0ac8b5a78f", "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "mod_note": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "num_reports": null, "removal_reason": null, "link_flair_background_color": "#dadada", "id": "vxdm3k", "is_robot_indexable": true, "report_reasons": null, "author": "Andrius_B", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/vxdm3k/webcam_video_augmentation_with_an_imagevideo/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://youtu.be/D1biUn9X7H8", "subreddit_subscribers": 985424, "created_utc": 1657638901.0, "num_crossposts": 0, "media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "Webcam Video Augmentation with an Image/Video using ArUco Markers | OpenCV", "type": "video", "thumbnail_width": 480, "height": 200, "width": 356, "html": "&lt;iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/D1biUn9X7H8?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen title=\"Webcam Video Augmentation with an Image/Video using ArUco Markers | OpenCV\"&gt;&lt;/iframe&gt;", "author_name": "Giovanni Code", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/D1biUn9X7H8/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCerTWfDpE0KdUGzrCdn5Ygw"}}, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "I am making a project on stocks and since they are always changing, I need to constantly update them. How can I do this?", "author_fullname": "t2_hkvze34s", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How can you constantly update a Firebase database (with Python)?", "link_flair_richtext": [{"e": "text", "t": "Discussion"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "discussion", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_vxnjvx", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.57, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Discussion", "can_mod_post": false, "score": 1, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1657665100.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am making a project on stocks and since they are always changing, I need to constantly update them. How can I do this?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731", "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "vxnjvx", "is_robot_indexable": true, "report_reasons": null, "author": "Beautiful-Desk5735", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/vxnjvx/how_can_you_constantly_update_a_firebase_database/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/vxnjvx/how_can_you_constantly_update_a_firebase_database/", "subreddit_subscribers": 985424, "created_utc": 1657665100.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "    import pygetwindow as pg\n    import time\n    import ctypes\n    import winsound\n    \n    duration = 100  # milliseconds\n    freq = 600  # Hz\n    time_on_window = 0 # Seconds\n    \n    while True:\n        window = pg.getActiveWindow()\n        if window.title != \"Chrome Remote Desktop - &lt;MY-PC&gt;\":\n            time_on_window += 1\n        if window.title == \"Chrome Remote Desktop - &lt;MY-PC&gt;\":\n            time_on_window = 0\n        if time_on_window &gt;= 10:\n            top_window = pg.getActiveWindow()\n            top_window.close()\n            winsound.Beep(freq, duration)\n            winsound.Beep(freq, duration)\n            winsound.Beep(freq, duration)\n            ctypes.windll.user32.MessageBoxW(0, \"GET BACK TO WORK DAVE\", \"STOP PROCRASTINATING\", 0x1000)\n            time_on_window = 0\n        print(time_on_window)\n        time.sleep(1)\n\nI was tired of mindlessly losing working hours to browsing Reddit so I wrote this simple script to help me stay focused on my work.  It needs error handling for the cases where pygetwindow returns an object without a title but other than that it seemed to work well enough.  The ability to put something like this together in a few minutes is why I love python!", "author_fullname": "t2_ep3ue", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "A quick and dirty script to help me focus on my work", "link_flair_richtext": [{"e": "text", "t": "Beginner Showcase"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "beginner-showcase", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_vwh6p3", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.95, "author_flair_background_color": null, "subreddit_type": "public", "ups": 427, "total_awards_received": 1, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Beginner Showcase", "can_mod_post": false, "score": 427, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1657542345.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;import pygetwindow as pg\nimport time\nimport ctypes\nimport winsound\n\nduration = 100  # milliseconds\nfreq = 600  # Hz\ntime_on_window = 0 # Seconds\n\nwhile True:\n    window = pg.getActiveWindow()\n    if window.title != &amp;quot;Chrome Remote Desktop - &amp;lt;MY-PC&amp;gt;&amp;quot;:\n        time_on_window += 1\n    if window.title == &amp;quot;Chrome Remote Desktop - &amp;lt;MY-PC&amp;gt;&amp;quot;:\n        time_on_window = 0\n    if time_on_window &amp;gt;= 10:\n        top_window = pg.getActiveWindow()\n        top_window.close()\n        winsound.Beep(freq, duration)\n        winsound.Beep(freq, duration)\n        winsound.Beep(freq, duration)\n        ctypes.windll.user32.MessageBoxW(0, &amp;quot;GET BACK TO WORK DAVE&amp;quot;, &amp;quot;STOP PROCRASTINATING&amp;quot;, 0x1000)\n        time_on_window = 0\n    print(time_on_window)\n    time.sleep(1)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I was tired of mindlessly losing working hours to browsing Reddit so I wrote this simple script to help me stay focused on my work.  It needs error handling for the cases where pygetwindow returns an object without a title but other than that it seemed to work well enough.  The ability to put something like this together in a few minutes is why I love python!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [{"giver_coin_reward": null, "subreddit_id": null, "is_new": false, "days_of_drip_extension": null, "coin_price": 125, "id": "award_5f123e3d-4f48-42f4-9c11-e98b566d5897", "penny_donate": null, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png", "days_of_premium": null, "tiers_by_required_awardings": null, "resized_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=16&amp;height=16&amp;auto=webp&amp;s=92932f465d58e4c16b12b6eac4ca07d27e3d11c0", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=32&amp;height=32&amp;auto=webp&amp;s=d11484a208d68a318bf9d4fcf371171a1cb6a7ef", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=48&amp;height=48&amp;auto=webp&amp;s=febdf28b6f39f7da7eb1365325b85e0bb49a9f63", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=64&amp;height=64&amp;auto=webp&amp;s=b4406a2d88bf86fa3dc8a45aacf7e0c7bdccc4fb", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=128&amp;height=128&amp;auto=webp&amp;s=19555b13e3e196b62eeb9160d1ac1d1b372dcb0b", "width": 128, "height": 128}], "icon_width": 2048, "static_icon_width": 2048, "start_date": null, "is_enabled": true, "awardings_required_to_grant_benefits": null, "description": "When you come across a feel-good thing.", "end_date": null, "sticky_duration_seconds": null, "subreddit_coin_reward": 0, "count": 1, "static_icon_height": 2048, "name": "Wholesome", "resized_static_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=16&amp;height=16&amp;auto=webp&amp;s=92932f465d58e4c16b12b6eac4ca07d27e3d11c0", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=32&amp;height=32&amp;auto=webp&amp;s=d11484a208d68a318bf9d4fcf371171a1cb6a7ef", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=48&amp;height=48&amp;auto=webp&amp;s=febdf28b6f39f7da7eb1365325b85e0bb49a9f63", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=64&amp;height=64&amp;auto=webp&amp;s=b4406a2d88bf86fa3dc8a45aacf7e0c7bdccc4fb", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=128&amp;height=128&amp;auto=webp&amp;s=19555b13e3e196b62eeb9160d1ac1d1b372dcb0b", "width": 128, "height": 128}], "icon_format": null, "icon_height": 2048, "penny_price": null, "award_type": "global", "static_icon_url": "https://i.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png"}], "awarders": [], "media_only": false, "link_flair_template_id": "1678450a-cfa2-11ea-830c-0e5035839c63", "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#73ad34", "id": "vwh6p3", "is_robot_indexable": true, "report_reasons": null, "author": "NoddskwodD", "discussion_type": null, "num_comments": 40, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/vwh6p3/a_quick_and_dirty_script_to_help_me_focus_on_my/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/vwh6p3/a_quick_and_dirty_script_to_help_me_focus_on_my/", "subreddit_subscribers": 985424, "created_utc": 1657542345.0, "num_crossposts": 1, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "", "author_fullname": "t2_6jut4l7g", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Created a serverless FastAPI microservice template. Would love feedback!", "link_flair_richtext": [{"e": "text", "t": "Resource"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "resource", "downs": 0, "thumbnail_height": 70, "top_awarded_type": null, "hide_score": false, "name": "t3_vxcm6h", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.6, "author_flair_background_color": null, "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Resource", "can_mod_post": false, "score": 2, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/YnfwIl-aRcXVkfkICC1H_ssqkmClMeFJcNja03irZIU.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "subreddit_type": "public", "created": 1657636277.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/tfpgh/fastapi-microservice-template", "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": true, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/ZKINiTI5ih0LQS8_CUONq2u_jZ2hBJfspNL0HyWJNgQ.jpg?auto=webp&amp;s=1cf2c1a41c21875e8f16322a54039b776deff06c", "width": 1200, "height": 600}, "resolutions": [{"url": "https://external-preview.redd.it/ZKINiTI5ih0LQS8_CUONq2u_jZ2hBJfspNL0HyWJNgQ.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=6f661a93e17fd926c63feed915e4854cacd2ac27", "width": 108, "height": 54}, {"url": "https://external-preview.redd.it/ZKINiTI5ih0LQS8_CUONq2u_jZ2hBJfspNL0HyWJNgQ.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=bf547219f02155b4799ab1b66a0908388beff28e", "width": 216, "height": 108}, {"url": "https://external-preview.redd.it/ZKINiTI5ih0LQS8_CUONq2u_jZ2hBJfspNL0HyWJNgQ.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=8aac2ca73320658c848272be2afb6d4fe234c3e6", "width": 320, "height": 160}, {"url": "https://external-preview.redd.it/ZKINiTI5ih0LQS8_CUONq2u_jZ2hBJfspNL0HyWJNgQ.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=553a7f51b52ae4fbcd0c26f7d7f193d2276226a8", "width": 640, "height": 320}, {"url": "https://external-preview.redd.it/ZKINiTI5ih0LQS8_CUONq2u_jZ2hBJfspNL0HyWJNgQ.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=ac222d5d99ad9648ee18bddbb49a7cac30104e89", "width": 960, "height": 480}, {"url": "https://external-preview.redd.it/ZKINiTI5ih0LQS8_CUONq2u_jZ2hBJfspNL0HyWJNgQ.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=632d6975929190e8db5c2400e3f94a933b11e31f", "width": 1080, "height": 540}], "variants": {}, "id": "uheeCM54e_jnxZvb_CY3w1zsWFQynpggNGndcuEUIwc"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "f9716fb2-4113-11ea-a3f1-0ef51f60f757", "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "mod_note": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "num_reports": null, "removal_reason": null, "link_flair_background_color": "", "id": "vxcm6h", "is_robot_indexable": true, "report_reasons": null, "author": "TFPenn01", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/vxcm6h/created_a_serverless_fastapi_microservice/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/tfpgh/fastapi-microservice-template", "subreddit_subscribers": 985424, "created_utc": 1657636277.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "\\#CODE\n\n \n\nclass G():  \n def \\_\\_init\\_\\_(self, child, val):  \n self.val = val  \n self.child = child  \n self.rows = \\[\\]  \n print(self.val, self.child)  \nclass E():  \n def \\_\\_init\\_\\_(self, child, val):  \n self.child = child  \n self.val = val  \n self.cells = \\[\\]  \n print(self.val, self.child)  \n\n\nclass B():  \n def \\_\\_init\\_\\_(self, child, val):  \n self.val = val  \n self.child = child  \n self.tables = \\[\\]  \n print(self.val, self.child)  \n\n\n\\# rg = open('rapgod.txt', 'r')  \npoem = G(E(B(G(E(B(G(E(B(G(E(B(G(E(B(G(E(B(G(E(B(G(E(B('I', 'never'),'thought'), 'that'), 'I'), 'would'), 'see'), 'a'),'poem'), 'lovely'), 'as'), 'a'), 'tree'), 'SCREW FLANDERS'),'SCREW FLANDERS'), 'SCREW FLANDERS'), 'SCREW FLANDERS'), 'SCREW FLANDERS'), 'SCREW FLANDERS'), 'SCREW FLANDERS'),'SCREW FLANDERS'), 'SCREW FLANDERS'), 'SCREW FLANDERS'), 'SCREW FLANDERS'), 'SCREW FLANDERS')  \n\\# def \\_print(poem):  \n\\# \u00a0 \u00a0if type(poem) == str:  \n\\# \u00a0 \u00a0 \u00a0return poem  \n\\# \u00a0 \u00a0return \\_print(poem.child)  \n\\#p = \\_print  \n\\# def foo(sentence, pick\\_a\\_word, num):  \n\\# \u00a0 \u00a0 output = ''  \n\\# \u00a0 \u00a0 f = open('test.py', 'w')  \n\\# \u00a0 \u00a0 words = sentence.split(' ')  \n\\# \u00a0 \u00a0 # for word in words:  \n\\# \u00a0 \u00a0 f.write(pick\\_a\\_word + ' = ' + 'G(E(B(' \\* num)\n\n\\#CONSOLE OUTPUT\n\njeff@DESKTOP-1DVSHRQ:\\~/practice/python/linkme$ python3\n\nPython 3.8.10 (default, Nov 26 2021, 20:14:08) \n\n\\[GCC 9.3.0\\] on linux\n\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\\&gt;&gt;&gt; from geb import \\*\n\nnever I\n\nthought &lt;geb.B object at 0x7f10cf62a640&gt;\n\nthat &lt;geb.E object at 0x7f10cf5f0c40&gt;\n\nI &lt;geb.G object at 0x7f10cf5f0d30&gt;\n\nwould &lt;geb.B object at 0x7f10cf5f0dc0&gt;\n\nsee &lt;geb.E object at 0x7f10cf5f0e20&gt;\n\na &lt;geb.G object at 0x7f10cf5f0e80&gt;\n\npoem &lt;geb.B object at 0x7f10cf5f0ee0&gt;\n\nlovely &lt;geb.E object at 0x7f10cf5f0f70&gt;\n\nas &lt;geb.G object at 0x7f10cf5f0f40&gt;\n\na &lt;geb.B object at 0x7f10cf5f0fd0&gt;\n\ntree &lt;geb.E object at 0x7f10cf5f0a60&gt;\n\nSCREW FLANDERS &lt;geb.G object at 0x7f10cf5f8070&gt;\n\nSCREW FLANDERS &lt;geb.B object at 0x7f10cf5f80d0&gt;\n\nSCREW FLANDERS &lt;geb.E object at 0x7f10cf5f8130&gt;\n\nSCREW FLANDERS &lt;geb.G object at 0x7f10cf5f8190&gt;\n\nSCREW FLANDERS &lt;geb.B object at 0x7f10cf5f81f0&gt;\n\nSCREW FLANDERS &lt;geb.E object at 0x7f10cf5f8250&gt;\n\nSCREW FLANDERS &lt;geb.G object at 0x7f10cf5f82b0&gt;\n\nSCREW FLANDERS &lt;geb.B object at 0x7f10cf5f8310&gt;\n\nSCREW FLANDERS &lt;geb.E object at 0x7f10cf5f8370&gt;\n\nSCREW FLANDERS &lt;geb.G object at 0x7f10cf5f83d0&gt;\n\nSCREW FLANDERS &lt;geb.B object at 0x7f10cf5f8430&gt;\n\nSCREW FLANDERS &lt;geb.E object at 0x7f10cf5f8490&gt;\n\n\\&gt;&gt;&gt;", "author_fullname": "t2_c9z9o", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "I made a program inspired by Doug Hofstadter's \"Goedel Escher Back: An Eternal Golden Braid\" .Right now, it generates a tree about a tree. Code (and console output) in description", "link_flair_richtext": [{"e": "text", "t": "Beginner Showcase"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "beginner-showcase", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_vxf9fg", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Beginner Showcase", "can_mod_post": false, "score": 2, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1657643183.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;#CODE&lt;/p&gt;\n\n&lt;p&gt;class G():&lt;br/&gt;\n def __init__(self, child, val):&lt;br/&gt;\n self.val = val&lt;br/&gt;\n self.child = child&lt;br/&gt;\n self.rows = []&lt;br/&gt;\n print(self.val, self.child)&lt;br/&gt;\nclass E():&lt;br/&gt;\n def __init__(self, child, val):&lt;br/&gt;\n self.child = child&lt;br/&gt;\n self.val = val&lt;br/&gt;\n self.cells = []&lt;br/&gt;\n print(self.val, self.child)  &lt;/p&gt;\n\n&lt;p&gt;class B():&lt;br/&gt;\n def __init__(self, child, val):&lt;br/&gt;\n self.val = val&lt;br/&gt;\n self.child = child&lt;br/&gt;\n self.tables = []&lt;br/&gt;\n print(self.val, self.child)  &lt;/p&gt;\n\n&lt;p&gt;# rg = open(&amp;#39;rapgod.txt&amp;#39;, &amp;#39;r&amp;#39;)&lt;br/&gt;\npoem = G(E(B(G(E(B(G(E(B(G(E(B(G(E(B(G(E(B(G(E(B(G(E(B(&amp;#39;I&amp;#39;, &amp;#39;never&amp;#39;),&amp;#39;thought&amp;#39;), &amp;#39;that&amp;#39;), &amp;#39;I&amp;#39;), &amp;#39;would&amp;#39;), &amp;#39;see&amp;#39;), &amp;#39;a&amp;#39;),&amp;#39;poem&amp;#39;), &amp;#39;lovely&amp;#39;), &amp;#39;as&amp;#39;), &amp;#39;a&amp;#39;), &amp;#39;tree&amp;#39;), &amp;#39;SCREW FLANDERS&amp;#39;),&amp;#39;SCREW FLANDERS&amp;#39;), &amp;#39;SCREW FLANDERS&amp;#39;), &amp;#39;SCREW FLANDERS&amp;#39;), &amp;#39;SCREW FLANDERS&amp;#39;), &amp;#39;SCREW FLANDERS&amp;#39;), &amp;#39;SCREW FLANDERS&amp;#39;),&amp;#39;SCREW FLANDERS&amp;#39;), &amp;#39;SCREW FLANDERS&amp;#39;), &amp;#39;SCREW FLANDERS&amp;#39;), &amp;#39;SCREW FLANDERS&amp;#39;), &amp;#39;SCREW FLANDERS&amp;#39;)&lt;br/&gt;\n# def _print(poem):&lt;br/&gt;\n# \u00a0 \u00a0if type(poem) == str:&lt;br/&gt;\n# \u00a0 \u00a0 \u00a0return poem&lt;br/&gt;\n# \u00a0 \u00a0return _print(poem.child)&lt;br/&gt;\n#p = _print&lt;br/&gt;\n# def foo(sentence, pick_a_word, num):&lt;br/&gt;\n# \u00a0 \u00a0 output = &amp;#39;&amp;#39;&lt;br/&gt;\n# \u00a0 \u00a0 f = open(&amp;#39;test.py&amp;#39;, &amp;#39;w&amp;#39;)&lt;br/&gt;\n# \u00a0 \u00a0 words = sentence.split(&amp;#39; &amp;#39;)&lt;br/&gt;\n# \u00a0 \u00a0 # for word in words:&lt;br/&gt;\n# \u00a0 \u00a0 f.write(pick_a_word + &amp;#39; = &amp;#39; + &amp;#39;G(E(B(&amp;#39; * num)&lt;/p&gt;\n\n&lt;p&gt;#CONSOLE OUTPUT&lt;/p&gt;\n\n&lt;p&gt;jeff@DESKTOP-1DVSHRQ:~/practice/python/linkme$ python3&lt;/p&gt;\n\n&lt;p&gt;Python 3.8.10 (default, Nov 26 2021, 20:14:08) &lt;/p&gt;\n\n&lt;p&gt;[GCC 9.3.0] on linux&lt;/p&gt;\n\n&lt;p&gt;Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.&lt;/p&gt;\n\n&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; from geb import *&lt;/p&gt;\n\n&lt;p&gt;never I&lt;/p&gt;\n\n&lt;p&gt;thought &amp;lt;geb.B object at 0x7f10cf62a640&amp;gt;&lt;/p&gt;\n\n&lt;p&gt;that &amp;lt;geb.E object at 0x7f10cf5f0c40&amp;gt;&lt;/p&gt;\n\n&lt;p&gt;I &amp;lt;geb.G object at 0x7f10cf5f0d30&amp;gt;&lt;/p&gt;\n\n&lt;p&gt;would &amp;lt;geb.B object at 0x7f10cf5f0dc0&amp;gt;&lt;/p&gt;\n\n&lt;p&gt;see &amp;lt;geb.E object at 0x7f10cf5f0e20&amp;gt;&lt;/p&gt;\n\n&lt;p&gt;a &amp;lt;geb.G object at 0x7f10cf5f0e80&amp;gt;&lt;/p&gt;\n\n&lt;p&gt;poem &amp;lt;geb.B object at 0x7f10cf5f0ee0&amp;gt;&lt;/p&gt;\n\n&lt;p&gt;lovely &amp;lt;geb.E object at 0x7f10cf5f0f70&amp;gt;&lt;/p&gt;\n\n&lt;p&gt;as &amp;lt;geb.G object at 0x7f10cf5f0f40&amp;gt;&lt;/p&gt;\n\n&lt;p&gt;a &amp;lt;geb.B object at 0x7f10cf5f0fd0&amp;gt;&lt;/p&gt;\n\n&lt;p&gt;tree &amp;lt;geb.E object at 0x7f10cf5f0a60&amp;gt;&lt;/p&gt;\n\n&lt;p&gt;SCREW FLANDERS &amp;lt;geb.G object at 0x7f10cf5f8070&amp;gt;&lt;/p&gt;\n\n&lt;p&gt;SCREW FLANDERS &amp;lt;geb.B object at 0x7f10cf5f80d0&amp;gt;&lt;/p&gt;\n\n&lt;p&gt;SCREW FLANDERS &amp;lt;geb.E object at 0x7f10cf5f8130&amp;gt;&lt;/p&gt;\n\n&lt;p&gt;SCREW FLANDERS &amp;lt;geb.G object at 0x7f10cf5f8190&amp;gt;&lt;/p&gt;\n\n&lt;p&gt;SCREW FLANDERS &amp;lt;geb.B object at 0x7f10cf5f81f0&amp;gt;&lt;/p&gt;\n\n&lt;p&gt;SCREW FLANDERS &amp;lt;geb.E object at 0x7f10cf5f8250&amp;gt;&lt;/p&gt;\n\n&lt;p&gt;SCREW FLANDERS &amp;lt;geb.G object at 0x7f10cf5f82b0&amp;gt;&lt;/p&gt;\n\n&lt;p&gt;SCREW FLANDERS &amp;lt;geb.B object at 0x7f10cf5f8310&amp;gt;&lt;/p&gt;\n\n&lt;p&gt;SCREW FLANDERS &amp;lt;geb.E object at 0x7f10cf5f8370&amp;gt;&lt;/p&gt;\n\n&lt;p&gt;SCREW FLANDERS &amp;lt;geb.G object at 0x7f10cf5f83d0&amp;gt;&lt;/p&gt;\n\n&lt;p&gt;SCREW FLANDERS &amp;lt;geb.B object at 0x7f10cf5f8430&amp;gt;&lt;/p&gt;\n\n&lt;p&gt;SCREW FLANDERS &amp;lt;geb.E object at 0x7f10cf5f8490&amp;gt;&lt;/p&gt;\n\n&lt;p&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "1678450a-cfa2-11ea-830c-0e5035839c63", "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#73ad34", "id": "vxf9fg", "is_robot_indexable": true, "report_reasons": null, "author": "BEST_RAPPER_ALIVE", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/vxf9fg/i_made_a_program_inspired_by_doug_hofstadters/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/vxf9fg/i_made_a_program_inspired_by_doug_hofstadters/", "subreddit_subscribers": 985424, "created_utc": 1657643183.0, "num_crossposts": 0, "media": null, "is_video": false}}], "before": null}}